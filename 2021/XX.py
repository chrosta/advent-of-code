###
# 1A
###
data = [int(i) for i in "143 147 150 166 180 187 188 185 199 198 199 197 218 221 238 239 233 234 217 212 215 216 215 217 220 241 245 232 230 234 206 251 272 273 278 279 285 292 288 286 289 290 294 301 298 300 297 305 306 310 340 343 352 356 362 376 380 383 382 385 372 391 384 385 398 430 426 422 423 433 419 421 431 424 442 450 453 449 487 491 462 464 466 467 468 466 482 484 501 500 501 497 498 497 508 516 521 540 541 536 537 536 542 549 535 541 548 549 551 570 572 606 605 601 608 609 611 605 631 618 635 636 635 636 637 638 676 673 668 674 683 684 683 680 687 688 698 700 706 696 713 707 708 719 721 728 719 723 715 712 722 721 709 680 681 680 681 690 686 687 682 683 680 693 708 718 730 743 726 753 747 748 751 772 801 805 797 789 790 797 812 806 813 815 813 815 822 835 843 854 858 859 860 869 872 870 864 876 880 882 865 869 876 882 886 885 898 900 909 913 902 910 914 916 920 898 899 931 936 937 938 941 950 939 942 935 932 941 945 944 957 959 967 975 990 1011 1008 1011 1015 1017 1018 1011 1010 1035 1036 1040 1041 1046 1048 1027 1047 1069 1079 1074 1075 1080 1079 1083 1071 1077 1080 1081 1082 1083 1085 1087 1089 1095 1096 1099 1110 1112 1119 1122 1124 1130 1133 1143 1139 1141 1142 1144 1176 1175 1159 1165 1172 1182 1203 1209 1193 1194 1193 1191 1196 1201 1202 1205 1216 1219 1220 1213 1212 1220 1226 1233 1234 1236 1239 1240 1242 1237 1261 1259 1257 1245 1251 1252 1272 1276 1277 1279 1284 1285 1286 1285 1315 1316 1331 1333 1335 1347 1344 1343 1342 1340 1354 1359 1367 1368 1378 1380 1358 1370 1371 1387 1388 1402 1404 1406 1401 1403 1405 1407 1408 1428 1432 1433 1434 1435 1446 1460 1461 1460 1468 1471 1472 1474 1465 1473 1496 1507 1510 1506 1502 1509 1512 1515 1516 1524 1526 1527 1528 1527 1541 1544 1545 1543 1548 1551 1544 1545 1550 1554 1556 1557 1558 1575 1578 1581 1587 1586 1590 1584 1571 1576 1574 1575 1585 1601 1604 1612 1613 1600 1587 1591 1596 1595 1601 1608 1614 1615 1614 1634 1636 1637 1639 1642 1629 1617 1618 1617 1612 1613 1614 1615 1617 1608 1609 1611 1608 1634 1636 1641 1637 1657 1665 1668 1679 1680 1695 1697 1698 1669 1670 1669 1673 1672 1678 1670 1671 1673 1689 1683 1685 1691 1692 1669 1670 1679 1672 1684 1704 1700 1692 1714 1715 1716 1712 1714 1716 1714 1718 1719 1713 1717 1710 1711 1721 1745 1752 1767 1762 1787 1785 1786 1790 1796 1814 1843 1859 1871 1876 1890 1891 1892 1894 1912 1914 1939 1955 1956 1960 1964 1967 1970 1971 1972 1969 1970 1984 1996 2017 2018 2020 2005 2006 2005 2007 2005 2006 2027 2031 2032 2012 2014 2013 2016 2014 2018 2040 2042 2061 2064 2063 2080 2086 2094 2063 2071 2092 2077 2078 2079 2080 2099 2100 2103 2118 2119 2124 2128 2135 2136 2135 2136 2137 2135 2163 2168 2162 2164 2160 2161 2162 2165 2169 2168 2185 2191 2197 2212 2224 2228 2229 2230 2243 2250 2251 2252 2255 2256 2247 2253 2262 2296 2317 2324 2327 2299 2300 2290 2291 2303 2292 2293 2294 2297 2298 2308 2309 2312 2337 2340 2349 2354 2345 2341 2340 2341 2344 2345 2341 2346 2352 2357 2340 2339 2336 2339 2351 2356 2358 2364 2366 2367 2370 2376 2377 2375 2378 2391 2394 2389 2391 2388 2389 2407 2420 2417 2416 2424 2443 2455 2457 2446 2449 2458 2466 2479 2486 2478 2491 2503 2507 2513 2518 2500 2502 2504 2514 2516 2517 2518 2529 2532 2543 2544 2543 2545 2553 2548 2559 2563 2573 2587 2584 2581 2579 2582 2577 2588 2589 2614 2617 2620 2622 2615 2619 2618 2610 2616 2615 2618 2616 2627 2630 2641 2659 2662 2663 2661 2669 2662 2687 2690 2691 2693 2696 2728 2746 2743 2746 2745 2746 2742 2749 2756 2750 2738 2743 2744 2746 2750 2753 2762 2770 2767 2766 2778 2780 2781 2776 2763 2762 2763 2766 2762 2753 2761 2768 2772 2746 2762 2767 2774 2795 2806 2809 2816 2830 2821 2837 2836 2838 2842 2831 2815 2816 2818 2817 2822 2817 2823 2834 2825 2818 2821 2847 2846 2845 2847 2848 2849 2863 2872 2866 2874 2875 2885 2886 2892 2898 2897 2917 2922 2916 2921 2922 2921 2940 2945 2935 2950 2946 2949 2951 2948 2940 2941 2940 2939 2955 2943 2941 2942 2945 2961 2962 2965 2975 2970 2971 2960 2961 2956 2960 2961 2967 2966 2979 2976 2983 3012 3024 3021 3041 3040 3041 3042 3048 3077 3088 3091 3109 3107 3116 3111 3115 3121 3095 3097 3077 3059 3065 3068 3061 3062 3061 3063 3068 3070 3073 3057 3075 3082 3089 3086 3090 3092 3106 3112 3118 3120 3119 3121 3119 3126 3133 3135 3163 3166 3167 3181 3185 3191 3197 3198 3199 3194 3210 3216 3224 3225 3235 3237 3245 3253 3259 3248 3256 3273 3265 3248 3249 3258 3257 3256 3255 3250 3252 3260 3261 3267 3268 3269 3284 3294 3334 3337 3340 3307 3316 3320 3328 3330 3350 3357 3363 3364 3361 3396 3397 3410 3411 3433 3452 3453 3465 3467 3469 3470 3467 3480 3494 3517 3519 3527 3542 3546 3547 3544 3570 3571 3596 3604 3603 3587 3588 3591 3589 3590 3591 3600 3598 3599 3600 3599 3600 3609 3608 3610 3611 3632 3633 3632 3633 3635 3642 3643 3656 3652 3653 3657 3676 3677 3687 3690 3693 3694 3697 3702 3703 3722 3729 3730 3731 3737 3744 3747 3751 3757 3758 3761 3769 3781 3796 3798 3797 3798 3812 3848 3849 3850 3854 3861 3859 3863 3867 3870 3882 3884 3876 3879 3909 3908 3910 3909 3908 3886 3888 3889 3891 3920 3921 3922 3913 3955 3956 3974 3975 3976 3988 3992 3999 4009 4010 4019 4023 4024 4035 4045 4044 4046 4072 4074 4093 4101 4105 4111 4141 4146 4147 4160 4162 4161 4162 4156 4158 4160 4168 4169 4168 4169 4192 4191 4222 4239 4227 4228 4226 4228 4227 4228 4221 4222 4223 4248 4249 4258 4249 4257 4260 4258 4257 4259 4260 4267 4284 4285 4286 4283 4280 4281 4280 4279 4282 4289 4290 4295 4300 4289 4290 4291 4300 4310 4314 4319 4320 4321 4324 4330 4326 4340 4326 4327 4332 4333 4334 4339 4361 4369 4370 4374 4372 4382 4398 4399 4395 4396 4397 4400 4404 4401 4405 4415 4427 4433 4446 4447 4455 4456 4457 4458 4467 4471 4463 4470 4460 4458 4459 4457 4468 4470 4448 4449 4453 4474 4470 4475 4474 4473 4472 4474 4476 4478 4479 4483 4484 4485 4481 4483 4492 4505 4513 4529 4530 4531 4503 4504 4505 4499 4500 4516 4517 4513 4497 4493 4494 4524 4537 4543 4544 4551 4552 4555 4565 4567 4566 4567 4566 4590 4591 4596 4597 4588 4572 4575 4572 4574 4575 4576 4584 4572 4578 4579 4593 4600 4604 4584 4586 4583 4599 4601 4603 4625 4624 4625 4627 4623 4624 4620 4618 4617 4616 4617 4612 4623 4634 4635 4623 4628 4629 4631 4633 4654 4659 4669 4674 4677 4678 4694 4699 4701 4713 4714 4722 4724 4725 4761 4785 4791 4783 4790 4791 4792 4809 4835 4840 4845 4852 4851 4852 4846 4848 4849 4854 4856 4862 4856 4875 4876 4878 4892 4893 4903 4891 4909 4923 4938 4939 4944 4953 4954 4975 4977 4978 4984 4987 4989 4987 4995 4994 4996 5000 5008 5018 5024 5027 5028 5031 5035 5051 5059 5061 5065 5069 5090 5110 5111 5113 5115 5129 5128 5139 5140 5141 5142 5149 5148 5147 5153 5157 5178 5189 5209 5217 5211 5215 5221 5243 5244 5275 5287 5290 5300 5301 5297 5300 5289 5311 5314 5303 5304 5306 5307 5316 5329 5330 5333 5334 5335 5343 5359 5380 5382 5383 5392 5403 5409 5410 5420 5427 5438 5448 5455 5458 5489 5490 5491 5492 5494 5497 5522 5523 5525 5536 5537 5542 5522 5529 5534 5535 5545 5546 5544 5538 5547 5551 5550 5551 5552 5553 5565 5578 5589 5590 5589 5592 5601 5614 5615 5614 5615 5616 5626 5627 5629 5647 5649 5650 5645 5646 5647 5672 5690 5692 5697 5701 5697 5702 5705 5718 5720 5725 5747 5749 5751 5756 5762 5764 5771 5772 5771 5772 5809 5822 5823 5840 5841 5839 5838 5839 5840 5838 5852 5853 5859 5865 5879 5885 5899 5907 5910 5936 5943 5957 5953 5958 5968 5979 5971 5966 5967 5971 5991 5993 5994 5993 5996 5993 6004 6010 6017 6018 6017 6038 6036 6035 6036 6039 6042 6037 6059 6062 6067 6068 6084 6077 6080 6081 6079 6093 6095 6098 6111 6107 6114 6105 6104 6111 6112 6120 6126 6140 6143 6142 6148 6152 6159 6150 6152 6168 6169 6167 6161 6160 6159 6160 6168 6169 6188 6200 6220 6221 6219 6221 6220 6232 6233 6234 6242 6247 6246 6247 6253 6258 6256 6249 6228 6225 6223 6227 6228 6259 6265 6268 6270 6271 6275 6270 6263 6265 6279 6323 6365 6374 6397 6415 6416 6419 6403 6405 6410 6417 6424 6425 6422 6432 6442 6451 6459 6458 6463 6485 6486 6509 6508 6532 6535 6551 6562 6563 6572 6571 6590 6628 6629 6627 6625 6620 6619 6625 6616 6615 6646 6648 6649 6651 6653 6645 6651 6652 6665 6660 6664 6665 6684 6685 6694 6695 6696 6693 6694 6703 6702 6696 6693 6694 6691 6725 6728 6715 6722 6728 6729 6730 6742 6753 6754 6752 6753 6761 6771 6773 6778 6779 6795 6819 6797 6799 6798 6807 6809 6837 6861 6864 6865 6868 6869 6867 6861 6871 6874 6872 6873 6875 6867 6877 6876 6898 6900 6902 6904 6905 6915 6908 6927 6928 6935 6942 6943 6945 6948 6943 6947 6990 6993 7013 7014 6997 6976 6972 6975 6976 6982 6991 7006 7009 7015 7019 7018 7008 7011 7018 7023 7027 7044 7054 7060 7058 7057 7061 7038 7036 7040 7041 7039 7042 7039 7037 7049 7056 7057 7072 7095 7101 7102 7104 7103 7106 7107 7108 7112 7117 7119 7117 7132 7130 7137 7143 7135 7138 7152 7156 7180 7181 7182 7179 7180 7174 7172 7162 7177 7180 7187 7153 7159 7145 7139 7140 7137 7156 7160 7161 7162 7163 7170 7163 7171 7167 7166 7167 7169 7170 7178 7179 7166 7177 7176 7203 7194 7187 7191 7202 7198 7199 7205 7206 7207 7208 7214 7215 7214 7215 7217 7208 7205 7214 7215 7216 7212 7214 7222 7226 7231 7229 7239 7238 7239 7250 7252 7255 7277 7279 7284 7290 7293 7294 7316 7325 7326 7327 7328 7326 7325 7329 7335 7340 7344 7337 7338 7348 7366 7376 7377 7382 7387 7401 7392 7396 7400 7406 7405 7410 7425 7426 7432 7449 7450 7444 7450 7455 7456 7471 7472 7494 7514 7515 7512 7515 7517 7514 7538 7539 7540 7556 7557 7553 7549 7546 7566 7567 7564 7565 7559 7560 7563 7571 7570 7572 7580 7587 7595 7597 7614 7622 7621 7627 7656 7652 7659 7658 7657 7660 7665 7664 7666 7669 7678 7680 7682 7683 7669 7692 7695 7699 7705 7717 7720 7730 7733 7748 7759 7747 7748 7759 7778 7777 7778 7780 7781 7780 7788 7787 7788 7814 7810 7787 7788 7802 7803 7813 7815 7818 7823 7830 7852 7868 7874 7879 7873 7854 7871 7877 7876 7883 7885 7887 7886 7889 7893 7900 7909 7910 7906 7910 7913 7918 7919 7941 7947 7948 7949 7951 7952 7977 7976 7979 8010 8011 8014 8015 8031 8054 8056 8059 8085 8087 8107 8109 8115 8116 8117 8115 8116 8119 8127 8145 8147".split(" ")]
len([data[i] for i in range(1, len(data)) if data[i] > data[i-1]])
#==
1532

###
# 1B
###
data = [int(i) for i in "143 147 150 166 180 187 188 185 199 198 199 197 218 221 238 239 233 234 217 212 215 216 215 217 220 241 245 232 230 234 206 251 272 273 278 279 285 292 288 286 289 290 294 301 298 300 297 305 306 310 340 343 352 356 362 376 380 383 382 385 372 391 384 385 398 430 426 422 423 433 419 421 431 424 442 450 453 449 487 491 462 464 466 467 468 466 482 484 501 500 501 497 498 497 508 516 521 540 541 536 537 536 542 549 535 541 548 549 551 570 572 606 605 601 608 609 611 605 631 618 635 636 635 636 637 638 676 673 668 674 683 684 683 680 687 688 698 700 706 696 713 707 708 719 721 728 719 723 715 712 722 721 709 680 681 680 681 690 686 687 682 683 680 693 708 718 730 743 726 753 747 748 751 772 801 805 797 789 790 797 812 806 813 815 813 815 822 835 843 854 858 859 860 869 872 870 864 876 880 882 865 869 876 882 886 885 898 900 909 913 902 910 914 916 920 898 899 931 936 937 938 941 950 939 942 935 932 941 945 944 957 959 967 975 990 1011 1008 1011 1015 1017 1018 1011 1010 1035 1036 1040 1041 1046 1048 1027 1047 1069 1079 1074 1075 1080 1079 1083 1071 1077 1080 1081 1082 1083 1085 1087 1089 1095 1096 1099 1110 1112 1119 1122 1124 1130 1133 1143 1139 1141 1142 1144 1176 1175 1159 1165 1172 1182 1203 1209 1193 1194 1193 1191 1196 1201 1202 1205 1216 1219 1220 1213 1212 1220 1226 1233 1234 1236 1239 1240 1242 1237 1261 1259 1257 1245 1251 1252 1272 1276 1277 1279 1284 1285 1286 1285 1315 1316 1331 1333 1335 1347 1344 1343 1342 1340 1354 1359 1367 1368 1378 1380 1358 1370 1371 1387 1388 1402 1404 1406 1401 1403 1405 1407 1408 1428 1432 1433 1434 1435 1446 1460 1461 1460 1468 1471 1472 1474 1465 1473 1496 1507 1510 1506 1502 1509 1512 1515 1516 1524 1526 1527 1528 1527 1541 1544 1545 1543 1548 1551 1544 1545 1550 1554 1556 1557 1558 1575 1578 1581 1587 1586 1590 1584 1571 1576 1574 1575 1585 1601 1604 1612 1613 1600 1587 1591 1596 1595 1601 1608 1614 1615 1614 1634 1636 1637 1639 1642 1629 1617 1618 1617 1612 1613 1614 1615 1617 1608 1609 1611 1608 1634 1636 1641 1637 1657 1665 1668 1679 1680 1695 1697 1698 1669 1670 1669 1673 1672 1678 1670 1671 1673 1689 1683 1685 1691 1692 1669 1670 1679 1672 1684 1704 1700 1692 1714 1715 1716 1712 1714 1716 1714 1718 1719 1713 1717 1710 1711 1721 1745 1752 1767 1762 1787 1785 1786 1790 1796 1814 1843 1859 1871 1876 1890 1891 1892 1894 1912 1914 1939 1955 1956 1960 1964 1967 1970 1971 1972 1969 1970 1984 1996 2017 2018 2020 2005 2006 2005 2007 2005 2006 2027 2031 2032 2012 2014 2013 2016 2014 2018 2040 2042 2061 2064 2063 2080 2086 2094 2063 2071 2092 2077 2078 2079 2080 2099 2100 2103 2118 2119 2124 2128 2135 2136 2135 2136 2137 2135 2163 2168 2162 2164 2160 2161 2162 2165 2169 2168 2185 2191 2197 2212 2224 2228 2229 2230 2243 2250 2251 2252 2255 2256 2247 2253 2262 2296 2317 2324 2327 2299 2300 2290 2291 2303 2292 2293 2294 2297 2298 2308 2309 2312 2337 2340 2349 2354 2345 2341 2340 2341 2344 2345 2341 2346 2352 2357 2340 2339 2336 2339 2351 2356 2358 2364 2366 2367 2370 2376 2377 2375 2378 2391 2394 2389 2391 2388 2389 2407 2420 2417 2416 2424 2443 2455 2457 2446 2449 2458 2466 2479 2486 2478 2491 2503 2507 2513 2518 2500 2502 2504 2514 2516 2517 2518 2529 2532 2543 2544 2543 2545 2553 2548 2559 2563 2573 2587 2584 2581 2579 2582 2577 2588 2589 2614 2617 2620 2622 2615 2619 2618 2610 2616 2615 2618 2616 2627 2630 2641 2659 2662 2663 2661 2669 2662 2687 2690 2691 2693 2696 2728 2746 2743 2746 2745 2746 2742 2749 2756 2750 2738 2743 2744 2746 2750 2753 2762 2770 2767 2766 2778 2780 2781 2776 2763 2762 2763 2766 2762 2753 2761 2768 2772 2746 2762 2767 2774 2795 2806 2809 2816 2830 2821 2837 2836 2838 2842 2831 2815 2816 2818 2817 2822 2817 2823 2834 2825 2818 2821 2847 2846 2845 2847 2848 2849 2863 2872 2866 2874 2875 2885 2886 2892 2898 2897 2917 2922 2916 2921 2922 2921 2940 2945 2935 2950 2946 2949 2951 2948 2940 2941 2940 2939 2955 2943 2941 2942 2945 2961 2962 2965 2975 2970 2971 2960 2961 2956 2960 2961 2967 2966 2979 2976 2983 3012 3024 3021 3041 3040 3041 3042 3048 3077 3088 3091 3109 3107 3116 3111 3115 3121 3095 3097 3077 3059 3065 3068 3061 3062 3061 3063 3068 3070 3073 3057 3075 3082 3089 3086 3090 3092 3106 3112 3118 3120 3119 3121 3119 3126 3133 3135 3163 3166 3167 3181 3185 3191 3197 3198 3199 3194 3210 3216 3224 3225 3235 3237 3245 3253 3259 3248 3256 3273 3265 3248 3249 3258 3257 3256 3255 3250 3252 3260 3261 3267 3268 3269 3284 3294 3334 3337 3340 3307 3316 3320 3328 3330 3350 3357 3363 3364 3361 3396 3397 3410 3411 3433 3452 3453 3465 3467 3469 3470 3467 3480 3494 3517 3519 3527 3542 3546 3547 3544 3570 3571 3596 3604 3603 3587 3588 3591 3589 3590 3591 3600 3598 3599 3600 3599 3600 3609 3608 3610 3611 3632 3633 3632 3633 3635 3642 3643 3656 3652 3653 3657 3676 3677 3687 3690 3693 3694 3697 3702 3703 3722 3729 3730 3731 3737 3744 3747 3751 3757 3758 3761 3769 3781 3796 3798 3797 3798 3812 3848 3849 3850 3854 3861 3859 3863 3867 3870 3882 3884 3876 3879 3909 3908 3910 3909 3908 3886 3888 3889 3891 3920 3921 3922 3913 3955 3956 3974 3975 3976 3988 3992 3999 4009 4010 4019 4023 4024 4035 4045 4044 4046 4072 4074 4093 4101 4105 4111 4141 4146 4147 4160 4162 4161 4162 4156 4158 4160 4168 4169 4168 4169 4192 4191 4222 4239 4227 4228 4226 4228 4227 4228 4221 4222 4223 4248 4249 4258 4249 4257 4260 4258 4257 4259 4260 4267 4284 4285 4286 4283 4280 4281 4280 4279 4282 4289 4290 4295 4300 4289 4290 4291 4300 4310 4314 4319 4320 4321 4324 4330 4326 4340 4326 4327 4332 4333 4334 4339 4361 4369 4370 4374 4372 4382 4398 4399 4395 4396 4397 4400 4404 4401 4405 4415 4427 4433 4446 4447 4455 4456 4457 4458 4467 4471 4463 4470 4460 4458 4459 4457 4468 4470 4448 4449 4453 4474 4470 4475 4474 4473 4472 4474 4476 4478 4479 4483 4484 4485 4481 4483 4492 4505 4513 4529 4530 4531 4503 4504 4505 4499 4500 4516 4517 4513 4497 4493 4494 4524 4537 4543 4544 4551 4552 4555 4565 4567 4566 4567 4566 4590 4591 4596 4597 4588 4572 4575 4572 4574 4575 4576 4584 4572 4578 4579 4593 4600 4604 4584 4586 4583 4599 4601 4603 4625 4624 4625 4627 4623 4624 4620 4618 4617 4616 4617 4612 4623 4634 4635 4623 4628 4629 4631 4633 4654 4659 4669 4674 4677 4678 4694 4699 4701 4713 4714 4722 4724 4725 4761 4785 4791 4783 4790 4791 4792 4809 4835 4840 4845 4852 4851 4852 4846 4848 4849 4854 4856 4862 4856 4875 4876 4878 4892 4893 4903 4891 4909 4923 4938 4939 4944 4953 4954 4975 4977 4978 4984 4987 4989 4987 4995 4994 4996 5000 5008 5018 5024 5027 5028 5031 5035 5051 5059 5061 5065 5069 5090 5110 5111 5113 5115 5129 5128 5139 5140 5141 5142 5149 5148 5147 5153 5157 5178 5189 5209 5217 5211 5215 5221 5243 5244 5275 5287 5290 5300 5301 5297 5300 5289 5311 5314 5303 5304 5306 5307 5316 5329 5330 5333 5334 5335 5343 5359 5380 5382 5383 5392 5403 5409 5410 5420 5427 5438 5448 5455 5458 5489 5490 5491 5492 5494 5497 5522 5523 5525 5536 5537 5542 5522 5529 5534 5535 5545 5546 5544 5538 5547 5551 5550 5551 5552 5553 5565 5578 5589 5590 5589 5592 5601 5614 5615 5614 5615 5616 5626 5627 5629 5647 5649 5650 5645 5646 5647 5672 5690 5692 5697 5701 5697 5702 5705 5718 5720 5725 5747 5749 5751 5756 5762 5764 5771 5772 5771 5772 5809 5822 5823 5840 5841 5839 5838 5839 5840 5838 5852 5853 5859 5865 5879 5885 5899 5907 5910 5936 5943 5957 5953 5958 5968 5979 5971 5966 5967 5971 5991 5993 5994 5993 5996 5993 6004 6010 6017 6018 6017 6038 6036 6035 6036 6039 6042 6037 6059 6062 6067 6068 6084 6077 6080 6081 6079 6093 6095 6098 6111 6107 6114 6105 6104 6111 6112 6120 6126 6140 6143 6142 6148 6152 6159 6150 6152 6168 6169 6167 6161 6160 6159 6160 6168 6169 6188 6200 6220 6221 6219 6221 6220 6232 6233 6234 6242 6247 6246 6247 6253 6258 6256 6249 6228 6225 6223 6227 6228 6259 6265 6268 6270 6271 6275 6270 6263 6265 6279 6323 6365 6374 6397 6415 6416 6419 6403 6405 6410 6417 6424 6425 6422 6432 6442 6451 6459 6458 6463 6485 6486 6509 6508 6532 6535 6551 6562 6563 6572 6571 6590 6628 6629 6627 6625 6620 6619 6625 6616 6615 6646 6648 6649 6651 6653 6645 6651 6652 6665 6660 6664 6665 6684 6685 6694 6695 6696 6693 6694 6703 6702 6696 6693 6694 6691 6725 6728 6715 6722 6728 6729 6730 6742 6753 6754 6752 6753 6761 6771 6773 6778 6779 6795 6819 6797 6799 6798 6807 6809 6837 6861 6864 6865 6868 6869 6867 6861 6871 6874 6872 6873 6875 6867 6877 6876 6898 6900 6902 6904 6905 6915 6908 6927 6928 6935 6942 6943 6945 6948 6943 6947 6990 6993 7013 7014 6997 6976 6972 6975 6976 6982 6991 7006 7009 7015 7019 7018 7008 7011 7018 7023 7027 7044 7054 7060 7058 7057 7061 7038 7036 7040 7041 7039 7042 7039 7037 7049 7056 7057 7072 7095 7101 7102 7104 7103 7106 7107 7108 7112 7117 7119 7117 7132 7130 7137 7143 7135 7138 7152 7156 7180 7181 7182 7179 7180 7174 7172 7162 7177 7180 7187 7153 7159 7145 7139 7140 7137 7156 7160 7161 7162 7163 7170 7163 7171 7167 7166 7167 7169 7170 7178 7179 7166 7177 7176 7203 7194 7187 7191 7202 7198 7199 7205 7206 7207 7208 7214 7215 7214 7215 7217 7208 7205 7214 7215 7216 7212 7214 7222 7226 7231 7229 7239 7238 7239 7250 7252 7255 7277 7279 7284 7290 7293 7294 7316 7325 7326 7327 7328 7326 7325 7329 7335 7340 7344 7337 7338 7348 7366 7376 7377 7382 7387 7401 7392 7396 7400 7406 7405 7410 7425 7426 7432 7449 7450 7444 7450 7455 7456 7471 7472 7494 7514 7515 7512 7515 7517 7514 7538 7539 7540 7556 7557 7553 7549 7546 7566 7567 7564 7565 7559 7560 7563 7571 7570 7572 7580 7587 7595 7597 7614 7622 7621 7627 7656 7652 7659 7658 7657 7660 7665 7664 7666 7669 7678 7680 7682 7683 7669 7692 7695 7699 7705 7717 7720 7730 7733 7748 7759 7747 7748 7759 7778 7777 7778 7780 7781 7780 7788 7787 7788 7814 7810 7787 7788 7802 7803 7813 7815 7818 7823 7830 7852 7868 7874 7879 7873 7854 7871 7877 7876 7883 7885 7887 7886 7889 7893 7900 7909 7910 7906 7910 7913 7918 7919 7941 7947 7948 7949 7951 7952 7977 7976 7979 8010 8011 8014 8015 8031 8054 8056 8059 8085 8087 8107 8109 8115 8116 8117 8115 8116 8119 8127 8145 8147".split(" ")]
data =[data[i]+data[i+1]+data[i+2] for i in range(0, len(data)-2)]
len([data[i] for i in range(1, len(data)) if data[i] > data[i-1]])
#==
1571

###
# 2A
###
horiz = 0; depth = 0
data = [d.split("=") for d in "forward=2 down=9 up=6 forward=1 down=5 down=7 down=9 forward=9 down=8 up=7 forward=2 up=6 forward=4 down=5 down=9 up=1 down=9 forward=8 forward=6 forward=6 forward=5 forward=9 up=3 up=5 forward=1 down=4 down=7 forward=2 up=3 down=8 forward=1 down=2 forward=3 up=1 up=1 up=7 forward=5 up=8 forward=8 forward=8 down=6 forward=1 forward=5 forward=4 forward=6 forward=5 down=6 down=9 forward=9 down=8 forward=6 down=5 forward=9 up=3 up=1 down=8 down=7 down=9 forward=7 down=8 down=9 down=5 down=3 forward=1 forward=6 down=1 forward=9 down=5 forward=7 up=2 down=8 forward=1 down=4 down=9 down=4 up=5 forward=4 forward=6 forward=1 down=3 forward=1 down=6 up=5 up=4 forward=6 forward=1 forward=1 down=2 up=4 up=3 up=2 up=6 down=6 forward=1 down=8 forward=1 up=6 forward=7 down=5 forward=4 forward=6 down=4 forward=4 down=4 down=4 forward=2 forward=8 down=5 down=1 down=8 up=5 up=8 down=5 forward=4 down=6 up=7 forward=2 down=3 forward=2 forward=2 down=9 down=3 up=6 forward=8 up=2 up=9 forward=4 down=1 down=5 forward=4 down=2 down=3 forward=5 down=4 forward=7 up=4 forward=6 up=8 forward=1 up=9 down=4 forward=2 down=1 forward=7 down=3 down=2 forward=5 down=3 down=9 down=9 up=5 forward=2 down=8 up=9 forward=4 down=3 forward=3 forward=6 up=2 forward=3 down=1 down=1 down=1 forward=7 forward=4 forward=7 down=5 down=6 down=2 forward=6 down=3 up=6 forward=4 down=8 up=1 forward=8 down=2 down=5 forward=4 down=9 forward=2 forward=2 down=3 forward=3 down=1 forward=2 down=7 forward=3 forward=9 up=9 forward=6 forward=2 down=1 down=5 forward=6 forward=6 down=3 up=3 forward=9 down=7 down=2 down=4 down=7 forward=5 up=4 forward=8 down=5 forward=7 down=7 up=7 down=8 forward=9 up=5 forward=1 down=2 forward=5 down=9 forward=3 down=5 forward=8 forward=3 up=5 down=2 up=3 forward=2 up=1 up=5 down=8 forward=2 down=5 up=4 up=5 up=2 forward=9 forward=6 down=9 up=9 forward=6 forward=4 forward=3 forward=7 up=1 down=2 down=6 down=1 forward=8 down=1 forward=6 down=8 forward=8 down=7 down=6 down=5 forward=2 up=8 up=6 up=5 down=1 forward=1 down=1 down=5 forward=7 forward=3 down=1 forward=5 forward=5 forward=8 down=1 up=2 down=6 up=6 forward=6 forward=6 down=3 forward=9 up=4 forward=4 down=6 up=1 forward=6 down=2 down=5 down=2 down=6 up=5 down=1 down=1 forward=3 forward=7 forward=3 up=2 down=8 down=4 down=1 down=5 down=1 down=9 forward=6 down=6 down=4 down=6 down=8 forward=4 down=6 down=7 forward=8 down=4 up=4 down=1 forward=1 forward=4 forward=1 up=9 down=7 forward=7 down=4 forward=1 up=4 forward=4 down=5 down=7 forward=5 forward=7 forward=1 forward=1 forward=9 forward=9 up=3 forward=4 down=2 forward=9 up=8 forward=3 up=5 down=3 down=8 forward=8 down=6 forward=1 down=6 down=6 up=9 down=2 forward=8 up=9 down=7 up=9 up=8 up=1 forward=6 forward=9 down=2 forward=8 down=1 up=4 forward=4 forward=7 up=2 forward=4 down=5 forward=3 down=2 down=7 down=4 down=2 up=5 down=5 down=5 down=4 up=1 forward=7 down=6 forward=5 forward=1 down=4 up=9 down=5 forward=7 forward=5 down=6 down=3 down=9 down=1 forward=6 up=2 down=7 down=3 down=6 up=3 down=4 down=4 forward=9 down=3 forward=2 down=9 down=8 up=4 down=2 forward=2 down=5 down=4 down=4 down=2 forward=6 down=3 forward=1 down=4 forward=7 down=5 up=4 down=6 forward=8 down=6 forward=2 forward=4 forward=5 forward=7 forward=4 forward=5 down=8 down=7 forward=3 forward=5 up=7 forward=1 down=4 forward=5 forward=4 forward=4 down=5 down=8 forward=8 down=1 down=1 down=5 up=5 forward=6 down=6 forward=3 forward=4 forward=7 forward=4 down=8 forward=2 down=4 forward=4 down=1 up=2 forward=6 up=1 down=7 down=9 forward=7 forward=2 up=3 down=2 down=9 down=5 up=7 forward=1 forward=8 down=8 up=3 down=3 forward=9 up=4 down=5 up=5 down=1 up=8 forward=9 down=3 up=6 forward=6 forward=1 down=1 forward=9 down=8 forward=8 down=6 up=9 down=4 up=3 up=9 forward=2 down=2 down=2 forward=3 down=2 forward=5 forward=4 up=8 forward=9 up=7 forward=2 down=5 down=6 forward=8 up=7 forward=4 forward=3 up=5 down=8 forward=3 up=2 down=3 forward=6 down=9 down=2 down=6 down=2 forward=7 forward=5 forward=7 down=8 forward=2 down=2 forward=8 up=8 forward=4 forward=3 up=5 down=3 forward=3 up=8 up=7 down=4 down=1 forward=2 down=1 up=6 up=4 down=3 up=1 forward=7 forward=7 forward=7 forward=8 down=1 forward=5 down=6 forward=9 forward=7 forward=7 down=4 up=4 down=6 down=9 up=4 up=2 up=6 forward=4 up=4 up=6 down=2 forward=4 down=9 forward=9 forward=9 down=1 forward=7 down=2 down=7 down=8 down=8 down=9 up=9 down=5 forward=5 forward=7 forward=4 down=7 forward=8 forward=1 down=8 up=9 down=7 forward=9 forward=4 forward=8 down=9 forward=4 down=3 forward=3 down=1 down=1 down=2 up=5 down=2 down=1 down=8 forward=3 up=2 forward=7 down=3 down=8 down=1 forward=4 forward=7 down=5 forward=6 down=6 down=2 forward=6 down=3 up=4 down=7 forward=7 up=1 up=9 down=1 down=2 down=8 down=7 up=1 forward=7 down=2 forward=4 forward=6 forward=9 down=6 forward=2 up=8 down=2 up=2 up=5 down=8 up=6 down=9 forward=6 down=8 down=6 down=1 up=7 up=6 down=8 forward=2 up=7 forward=5 forward=7 forward=7 up=5 forward=2 down=9 up=2 up=8 up=2 down=3 down=7 forward=9 down=3 up=9 forward=8 up=8 forward=4 forward=8 forward=6 up=1 down=3 up=1 down=1 forward=2 forward=1 forward=4 forward=7 up=8 down=9 up=2 down=7 forward=4 down=3 forward=4 forward=2 down=9 forward=8 forward=5 forward=3 down=6 forward=4 forward=4 forward=9 forward=4 up=5 down=7 up=6 forward=5 down=5 forward=4 down=5 forward=7 forward=3 forward=5 down=5 forward=4 down=5 up=4 down=8 up=3 down=3 up=5 forward=4 forward=5 down=6 forward=6 forward=1 forward=8 down=6 down=9 up=5 forward=2 forward=8 up=6 down=6 forward=2 down=8 forward=7 forward=7 down=5 forward=5 forward=8 forward=1 down=4 down=2 down=5 up=4 forward=3 forward=5 down=4 down=7 down=4 up=9 up=6 forward=1 down=8 up=8 up=9 forward=2 forward=1 down=6 forward=6 down=4 forward=7 up=2 up=1 forward=4 down=1 forward=8 forward=3 up=7 up=5 down=1 forward=8 forward=6 up=6 forward=9 down=5 down=9 forward=2 down=3 up=1 up=7 down=1 forward=8 up=9 down=1 down=5 down=7 down=5 down=5 down=5 up=9 forward=9 forward=7 forward=4 forward=6 down=5 down=3 forward=9 forward=1 down=1 down=8 up=4 down=9 forward=9 up=1 down=5 forward=8 up=6 forward=3 down=6 up=8 down=7 forward=3 forward=6 down=7 forward=6 forward=4 forward=4 down=4 forward=6 forward=5 down=6 forward=6 down=7 forward=6 forward=3 up=4 up=2 up=6 down=2 down=8 forward=5 forward=1 up=4 forward=7 forward=9 up=6 down=7 down=3 up=5 forward=5 down=8 up=1 down=1 down=3 down=2 down=1 forward=5 down=3 down=5 forward=7 forward=9 down=3 forward=7 forward=5 forward=4 forward=2 forward=7 forward=8 forward=6 down=8 forward=5 forward=6 forward=6 down=8 down=2 forward=4 down=7 forward=6 down=7 down=4 forward=6 up=6 forward=4 forward=9 forward=2 forward=3 forward=1 down=8 down=3 forward=4 up=3 forward=7 forward=1 down=7 down=8 forward=1 up=8 forward=8 up=8 down=5 forward=6 down=8 down=4 down=9 up=1 down=3 forward=6 down=6 forward=7 forward=3 down=6 down=6 forward=4 down=4 down=1 down=8 forward=2 forward=8 forward=8 down=6 forward=9 down=9 down=5 down=5 forward=7 down=1 forward=1 down=1 down=6 down=1 forward=1 up=6 up=9 forward=5 down=6 forward=8 forward=6 down=7 forward=1 forward=4 forward=9 forward=2 forward=4 down=2 forward=1 forward=8 down=1 down=1 forward=4 down=5 down=3 down=9 down=2 up=8 down=7 down=1 down=9 forward=2 forward=2 up=3 forward=3 down=3 forward=5 forward=9 down=7 up=7 down=9 forward=3 forward=7 down=1 forward=8 down=8 forward=1 down=8 down=6 forward=2 down=3 down=1 down=8 forward=3 up=5 down=7 up=2 up=8 forward=5 up=7 down=6 up=7 down=9 forward=5 up=4 forward=9 down=5 up=7 down=2 up=2 up=7 forward=5 down=6 forward=4 down=4 down=3 forward=2 up=2 down=5 forward=8 down=3 up=7 down=1 down=7 forward=7 forward=4 forward=7 down=2 down=9 down=6 down=9 down=2 down=9 down=7 down=5 forward=4 up=5 up=7 forward=2 forward=7 down=3 down=3 forward=4".split(" ")]
fces = {'forward': (lambda x: horiz+x), 'down': (lambda x: depth+x), 'up': (lambda x: depth-x)}
#--
for d in data:
    if (d[0] == 'forward'): horiz = fces[d[0]](int(d[1]))
    else: depth = fces[d[0]](int(d[1]))
#--
horiz * depth
#==
2070300

###
# 2B
###
aim = 0; horiz = 0; depth = 0
data = [d.split("=") for d in "forward=2 down=9 up=6 forward=1 down=5 down=7 down=9 forward=9 down=8 up=7 forward=2 up=6 forward=4 down=5 down=9 up=1 down=9 forward=8 forward=6 forward=6 forward=5 forward=9 up=3 up=5 forward=1 down=4 down=7 forward=2 up=3 down=8 forward=1 down=2 forward=3 up=1 up=1 up=7 forward=5 up=8 forward=8 forward=8 down=6 forward=1 forward=5 forward=4 forward=6 forward=5 down=6 down=9 forward=9 down=8 forward=6 down=5 forward=9 up=3 up=1 down=8 down=7 down=9 forward=7 down=8 down=9 down=5 down=3 forward=1 forward=6 down=1 forward=9 down=5 forward=7 up=2 down=8 forward=1 down=4 down=9 down=4 up=5 forward=4 forward=6 forward=1 down=3 forward=1 down=6 up=5 up=4 forward=6 forward=1 forward=1 down=2 up=4 up=3 up=2 up=6 down=6 forward=1 down=8 forward=1 up=6 forward=7 down=5 forward=4 forward=6 down=4 forward=4 down=4 down=4 forward=2 forward=8 down=5 down=1 down=8 up=5 up=8 down=5 forward=4 down=6 up=7 forward=2 down=3 forward=2 forward=2 down=9 down=3 up=6 forward=8 up=2 up=9 forward=4 down=1 down=5 forward=4 down=2 down=3 forward=5 down=4 forward=7 up=4 forward=6 up=8 forward=1 up=9 down=4 forward=2 down=1 forward=7 down=3 down=2 forward=5 down=3 down=9 down=9 up=5 forward=2 down=8 up=9 forward=4 down=3 forward=3 forward=6 up=2 forward=3 down=1 down=1 down=1 forward=7 forward=4 forward=7 down=5 down=6 down=2 forward=6 down=3 up=6 forward=4 down=8 up=1 forward=8 down=2 down=5 forward=4 down=9 forward=2 forward=2 down=3 forward=3 down=1 forward=2 down=7 forward=3 forward=9 up=9 forward=6 forward=2 down=1 down=5 forward=6 forward=6 down=3 up=3 forward=9 down=7 down=2 down=4 down=7 forward=5 up=4 forward=8 down=5 forward=7 down=7 up=7 down=8 forward=9 up=5 forward=1 down=2 forward=5 down=9 forward=3 down=5 forward=8 forward=3 up=5 down=2 up=3 forward=2 up=1 up=5 down=8 forward=2 down=5 up=4 up=5 up=2 forward=9 forward=6 down=9 up=9 forward=6 forward=4 forward=3 forward=7 up=1 down=2 down=6 down=1 forward=8 down=1 forward=6 down=8 forward=8 down=7 down=6 down=5 forward=2 up=8 up=6 up=5 down=1 forward=1 down=1 down=5 forward=7 forward=3 down=1 forward=5 forward=5 forward=8 down=1 up=2 down=6 up=6 forward=6 forward=6 down=3 forward=9 up=4 forward=4 down=6 up=1 forward=6 down=2 down=5 down=2 down=6 up=5 down=1 down=1 forward=3 forward=7 forward=3 up=2 down=8 down=4 down=1 down=5 down=1 down=9 forward=6 down=6 down=4 down=6 down=8 forward=4 down=6 down=7 forward=8 down=4 up=4 down=1 forward=1 forward=4 forward=1 up=9 down=7 forward=7 down=4 forward=1 up=4 forward=4 down=5 down=7 forward=5 forward=7 forward=1 forward=1 forward=9 forward=9 up=3 forward=4 down=2 forward=9 up=8 forward=3 up=5 down=3 down=8 forward=8 down=6 forward=1 down=6 down=6 up=9 down=2 forward=8 up=9 down=7 up=9 up=8 up=1 forward=6 forward=9 down=2 forward=8 down=1 up=4 forward=4 forward=7 up=2 forward=4 down=5 forward=3 down=2 down=7 down=4 down=2 up=5 down=5 down=5 down=4 up=1 forward=7 down=6 forward=5 forward=1 down=4 up=9 down=5 forward=7 forward=5 down=6 down=3 down=9 down=1 forward=6 up=2 down=7 down=3 down=6 up=3 down=4 down=4 forward=9 down=3 forward=2 down=9 down=8 up=4 down=2 forward=2 down=5 down=4 down=4 down=2 forward=6 down=3 forward=1 down=4 forward=7 down=5 up=4 down=6 forward=8 down=6 forward=2 forward=4 forward=5 forward=7 forward=4 forward=5 down=8 down=7 forward=3 forward=5 up=7 forward=1 down=4 forward=5 forward=4 forward=4 down=5 down=8 forward=8 down=1 down=1 down=5 up=5 forward=6 down=6 forward=3 forward=4 forward=7 forward=4 down=8 forward=2 down=4 forward=4 down=1 up=2 forward=6 up=1 down=7 down=9 forward=7 forward=2 up=3 down=2 down=9 down=5 up=7 forward=1 forward=8 down=8 up=3 down=3 forward=9 up=4 down=5 up=5 down=1 up=8 forward=9 down=3 up=6 forward=6 forward=1 down=1 forward=9 down=8 forward=8 down=6 up=9 down=4 up=3 up=9 forward=2 down=2 down=2 forward=3 down=2 forward=5 forward=4 up=8 forward=9 up=7 forward=2 down=5 down=6 forward=8 up=7 forward=4 forward=3 up=5 down=8 forward=3 up=2 down=3 forward=6 down=9 down=2 down=6 down=2 forward=7 forward=5 forward=7 down=8 forward=2 down=2 forward=8 up=8 forward=4 forward=3 up=5 down=3 forward=3 up=8 up=7 down=4 down=1 forward=2 down=1 up=6 up=4 down=3 up=1 forward=7 forward=7 forward=7 forward=8 down=1 forward=5 down=6 forward=9 forward=7 forward=7 down=4 up=4 down=6 down=9 up=4 up=2 up=6 forward=4 up=4 up=6 down=2 forward=4 down=9 forward=9 forward=9 down=1 forward=7 down=2 down=7 down=8 down=8 down=9 up=9 down=5 forward=5 forward=7 forward=4 down=7 forward=8 forward=1 down=8 up=9 down=7 forward=9 forward=4 forward=8 down=9 forward=4 down=3 forward=3 down=1 down=1 down=2 up=5 down=2 down=1 down=8 forward=3 up=2 forward=7 down=3 down=8 down=1 forward=4 forward=7 down=5 forward=6 down=6 down=2 forward=6 down=3 up=4 down=7 forward=7 up=1 up=9 down=1 down=2 down=8 down=7 up=1 forward=7 down=2 forward=4 forward=6 forward=9 down=6 forward=2 up=8 down=2 up=2 up=5 down=8 up=6 down=9 forward=6 down=8 down=6 down=1 up=7 up=6 down=8 forward=2 up=7 forward=5 forward=7 forward=7 up=5 forward=2 down=9 up=2 up=8 up=2 down=3 down=7 forward=9 down=3 up=9 forward=8 up=8 forward=4 forward=8 forward=6 up=1 down=3 up=1 down=1 forward=2 forward=1 forward=4 forward=7 up=8 down=9 up=2 down=7 forward=4 down=3 forward=4 forward=2 down=9 forward=8 forward=5 forward=3 down=6 forward=4 forward=4 forward=9 forward=4 up=5 down=7 up=6 forward=5 down=5 forward=4 down=5 forward=7 forward=3 forward=5 down=5 forward=4 down=5 up=4 down=8 up=3 down=3 up=5 forward=4 forward=5 down=6 forward=6 forward=1 forward=8 down=6 down=9 up=5 forward=2 forward=8 up=6 down=6 forward=2 down=8 forward=7 forward=7 down=5 forward=5 forward=8 forward=1 down=4 down=2 down=5 up=4 forward=3 forward=5 down=4 down=7 down=4 up=9 up=6 forward=1 down=8 up=8 up=9 forward=2 forward=1 down=6 forward=6 down=4 forward=7 up=2 up=1 forward=4 down=1 forward=8 forward=3 up=7 up=5 down=1 forward=8 forward=6 up=6 forward=9 down=5 down=9 forward=2 down=3 up=1 up=7 down=1 forward=8 up=9 down=1 down=5 down=7 down=5 down=5 down=5 up=9 forward=9 forward=7 forward=4 forward=6 down=5 down=3 forward=9 forward=1 down=1 down=8 up=4 down=9 forward=9 up=1 down=5 forward=8 up=6 forward=3 down=6 up=8 down=7 forward=3 forward=6 down=7 forward=6 forward=4 forward=4 down=4 forward=6 forward=5 down=6 forward=6 down=7 forward=6 forward=3 up=4 up=2 up=6 down=2 down=8 forward=5 forward=1 up=4 forward=7 forward=9 up=6 down=7 down=3 up=5 forward=5 down=8 up=1 down=1 down=3 down=2 down=1 forward=5 down=3 down=5 forward=7 forward=9 down=3 forward=7 forward=5 forward=4 forward=2 forward=7 forward=8 forward=6 down=8 forward=5 forward=6 forward=6 down=8 down=2 forward=4 down=7 forward=6 down=7 down=4 forward=6 up=6 forward=4 forward=9 forward=2 forward=3 forward=1 down=8 down=3 forward=4 up=3 forward=7 forward=1 down=7 down=8 forward=1 up=8 forward=8 up=8 down=5 forward=6 down=8 down=4 down=9 up=1 down=3 forward=6 down=6 forward=7 forward=3 down=6 down=6 forward=4 down=4 down=1 down=8 forward=2 forward=8 forward=8 down=6 forward=9 down=9 down=5 down=5 forward=7 down=1 forward=1 down=1 down=6 down=1 forward=1 up=6 up=9 forward=5 down=6 forward=8 forward=6 down=7 forward=1 forward=4 forward=9 forward=2 forward=4 down=2 forward=1 forward=8 down=1 down=1 forward=4 down=5 down=3 down=9 down=2 up=8 down=7 down=1 down=9 forward=2 forward=2 up=3 forward=3 down=3 forward=5 forward=9 down=7 up=7 down=9 forward=3 forward=7 down=1 forward=8 down=8 forward=1 down=8 down=6 forward=2 down=3 down=1 down=8 forward=3 up=5 down=7 up=2 up=8 forward=5 up=7 down=6 up=7 down=9 forward=5 up=4 forward=9 down=5 up=7 down=2 up=2 up=7 forward=5 down=6 forward=4 down=4 down=3 forward=2 up=2 down=5 forward=8 down=3 up=7 down=1 down=7 forward=7 forward=4 forward=7 down=2 down=9 down=6 down=9 down=2 down=9 down=7 down=5 forward=4 up=5 up=7 forward=2 forward=7 down=3 down=3 forward=4".split(" ")]
fces = {'forward': [(lambda x: horiz+x), (lambda x: depth+(aim*x))], 'down': (lambda x: aim+x), 'up': (lambda x: aim-x)}
#--
for d in data:
    if (d[0] == 'forward'):
        horiz = fces[d[0]][0](int(d[1]))
        depth = fces[d[0]][1](int(d[1]))
    else:
        aim = fces[d[0]](int(d[1]))
#--
horiz * depth
#==
2078985210

###
# 3A
###
data = [[int(c) for c in d] for d insplit(" ")]
size = len(data[0])
res = ["", ""]
#--
for r in range(0, len(res)):
    for i in range(0, size):
        f = 0
        for d in data:
            if d[i] == 1: f += 1
            else: f -= 1
        if f >= 0: f = 1
        else: f = 0
        if r > 0: f = int(not(f))
        res[r] += str(f)
#--
res = [int(r, 2) for r in res]
res[0] * res[1]
#==
2954600

###
# 3B.
###d
from copy import deepcopy as dc
data = [[int(c) for c in d] for d insplit(" ")]
size = len(data[0])
old = []; new = []; res = [0, 0]
#--
for r in range(0, len(res)):
    new = []; old = dc(data)
    for i in range(0, size):
        f = 0
        for o in old:
            if o[i] == 1: f += 1
            else: f -= 1
        if f >= 0: f = 1
        else: f = 0
        if r > 0: f = int(not(f))
        for o in old:
            if o[i] == f: new.append(o)
        print(str(i) + "=" + str(len(new)))
        if len(new) == 1: break
        old = dc(new)
        new = []
    res[r] = int(''.join([str(n) for n in new[0]]),2)
    print("---")
#--    
res[0] * res[1]
#==
1662846

###
# 4A
###
from functools import reduce
data = "76,69,38,62,33,48,81,2,64,21,80,90,29,99,37,15,93,46,75,0,89,56,58,40,92,47,8,6,54,96,12,66,83,4,70,19,17,5,50,52,45,51,18,27,49,71,28,86,74,77,11,20,84,72,23,31,16,78,91,65,87,79,73,94,24,68,63,9,88,82,30,42,60,13,67,85,44,59,7,53,22,1,26,41,61,55,43,39,3,35,25,34,57,10,14,32,97,95,36,98 17,45,62,28,73 39,12,0,52,5 87,48,50,85,44 66,57,78,94,3 91,37,69,16,1 1,67,4,58,13 25,54,34,63,87 59,70,66,72,71 33,17,8,20,85 69,46,50,41,88 47,63,80,15,90 24,1,40,94,13 56,62,74,81,95 43,88,37,99,22 57,52,33,84,49 33,58,54,28,10 7,82,97,66,92 95,77,5,86,84 85,91,94,21,69 23,12,13,98,46 1,63,58,23,0 67,14,45,42,32 48,64,83,10,13 74,16,3,79,46 44,52,95,25,6 93,47,5,96,28 88,76,70,0,72 77,1,36,54,9 14,17,75,64,15 79,66,61,78,26 23,75,96,71,76 63,59,39,65,36 95,21,67,41,74 9,97,4,2,49 32,17,81,0,56 77,53,30,94,5 4,42,87,25,24 52,15,68,9,45 56,89,98,47,34 99,32,27,78,46 75,70,99,65,41 87,6,11,88,1 4,42,64,98,78 63,50,69,79,39 67,46,17,97,26 26,73,6,79,47 67,51,64,16,60 8,1,61,76,39 13,57,48,65,46 63,83,4,92,71 97,93,21,88,80 58,42,53,95,90 49,29,30,26,22 66,51,75,8,13 5,39,19,4,96 77,16,33,1,6 54,91,60,56,88 4,59,24,79,22 36,49,17,97,27 67,99,92,62,86 78,18,59,74,54 79,68,23,51,85 47,42,92,58,12 30,97,19,26,15 1,62,94,65,70 6,91,56,55,11 58,96,21,50,53 51,60,67,64,71 12,25,44,47,39 15,92,81,9,38 98,16,31,21,30 58,10,3,89,7 79,20,60,74,26 86,4,83,96,15 94,29,44,41,34 50,75,83,20,52 65,85,41,78,38 31,64,86,32,10 25,82,13,61,22 11,73,4,77,24 56,74,26,20,62 83,46,41,24,52 34,28,76,80,36 75,48,63,17,55 69,47,22,45,60 17,15,71,28,68 12,76,27,25,14 34,39,31,58,13 75,67,2,26,42 72,43,0,23,54 37,43,18,76,47 96,1,80,77,27 13,89,16,4,6 74,92,55,99,38 19,75,52,85,81 69,51,39,95,98 90,61,91,6,21 25,57,81,10,49 67,55,43,96,17 78,11,3,64,77 51,66,8,62,60 82,94,24,54,26 59,91,97,37,77 20,25,69,98,84 38,12,65,35,61 7,26,91,84,17 23,52,86,19,24 58,44,5,32,40 6,27,89,76,92 33,10,90,83,82 44,61,68,70,87 23,17,90,93,21 92,54,95,46,14 47,24,89,33,31 26,80,35,42,78 88,80,50,46,26 1,97,92,51,74 16,24,40,31,95 47,85,61,99,12 27,8,25,42,13 8,59,37,87,44 62,0,67,39,92 79,81,54,24,93 56,84,23,18,34 72,68,29,11,91 64,51,81,44,12 49,20,23,36,53 59,73,37,60,57 96,65,5,43,14 46,31,47,87,1 11,13,72,30,3 67,20,84,59,77 52,87,97,51,16 43,36,21,33,82 41,96,91,93,29 7,31,19,87,94 92,68,18,57,23 5,88,81,86,10 99,50,37,33,25 97,22,0,53,91 78,39,41,44,89 91,82,71,42,37 25,93,67,53,9 84,23,33,92,14 74,45,57,86,50 79,83,10,85,48 51,29,93,87,21 58,5,52,37,99 80,1,18,46,42 60,92,0,44,59 79,76,54,14,42 57,11,39,66,33 86,62,27,61,26 48,68,47,99,46 78,90,9,36,98 76,79,66,38,65 67,91,90,41,93 2,1,33,56,50 46,9,0,61,62 26,58,16,24,10 20,22,86,58,14 53,74,54,85,6 2,96,40,72,78 99,81,16,31,55 11,57,62,51,32 8,51,73,40,88 83,35,37,98,27 3,42,15,14,33 2,38,52,82,71 67,55,9,66,53 94,99,54,18,14 40,56,57,66,68 28,74,48,30,0 59,1,22,50,23 13,71,6,26,15 28,60,66,25,56 49,68,84,10,38 73,50,87,16,14 79,26,29,18,2 57,22,5,48,91 61,78,3,95,87 6,62,25,74,84 22,71,93,57,20 81,33,15,45,96 38,14,19,72,26 51,19,62,72,39 36,83,6,33,9 95,43,42,2,22 94,99,23,97,11 66,61,16,30,35 51,38,7,24,82 23,12,46,55,85 43,97,45,61,67 53,2,77,99,34 17,93,25,9,72 37,32,35,63,93 40,16,51,99,88 73,69,49,80,33 56,54,18,87,71 29,98,85,58,17 38,4,55,72,33 29,63,86,52,75 7,47,34,53,14 89,39,83,36,78 6,21,15,18,96 56,19,40,0,7 61,33,50,66,54 93,91,64,6,45 51,90,94,18,37 15,28,13,2,44 18,79,4,56,15 38,80,8,42,5 60,11,53,23,27 9,71,19,83,72 39,97,98,99,7 90,22,41,95,15 20,18,7,70,49 97,51,79,94,77 31,89,50,40,9 37,84,6,98,35 38,56,94,55,0 92,84,8,85,73 86,81,76,35,1 62,5,59,77,72 79,97,60,11,70 43,98,87,97,70 53,55,35,8,64 80,59,75,11,2 17,95,13,38,90 31,20,60,84,4 38,19,10,73,86 37,72,66,22,53 6,41,20,21,92 0,13,9,89,17 43,61,80,60,65 61,50,42,99,26 11,51,52,83,64 92,60,2,91,20 95,10,14,94,98 5,37,90,17,69 82,48,51,32,78 30,39,10,84,69 94,5,60,92,89 95,31,64,67,23 96,20,33,66,61 33,92,78,24,74 45,34,73,5,57 18,37,69,44,38 25,30,53,87,64 28,23,14,10,81 39,82,40,64,86 26,81,3,85,50 71,75,91,65,96 17,55,8,56,59 22,36,73,90,0 18,67,50,70,71 83,8,75,55,29 66,33,39,88,16 32,84,78,59,0 11,3,61,65,36 1,12,66,59,9 24,97,75,83,11 45,16,14,31,71 85,43,99,18,15 61,56,80,69,29 18,50,86,53,71 67,36,14,24,55 52,30,33,54,81 72,51,39,28,42 45,98,78,35,73 60,86,68,58,37 17,78,43,31,96 33,61,34,45,36 10,29,83,98,2 88,73,7,84,50 30,21,94,31,4 20,68,91,55,51 10,98,2,25,84 64,97,29,28,58 75,17,76,54,65 17,11,88,9,66 1,59,60,79,55 30,46,83,67,91 23,45,99,90,6 81,33,8,13,76 25,68,43,59,51 56,14,41,52,16 62,36,12,37,71 83,90,81,91,0 95,92,29,54,26 53,84,85,18,10 51,44,87,86,67 4,81,82,77,30 26,68,80,57,71 22,83,47,61,14 41,89,38,14,66 70,92,26,97,53 78,25,5,4,48 54,86,31,23,0 99,73,6,20,98 18,81,96,60,47 59,87,95,15,57 34,17,26,7,42 25,90,45,94,5 10,41,32,20,98 37,9,20,82,83 84,14,62,3,76 86,67,95,40,65 57,26,1,19,69 49,41,29,35,13 29,74,69,92,48 80,47,59,18,13 98,5,64,89,83 37,97,90,32,49 25,87,39,21,63 1,61,5,82,66 87,75,18,23,63 38,51,33,59,4 21,14,17,97,92 94,45,84,22,10 86,93,8,99,54 1,4,37,30,34 80,17,50,74,97 28,11,6,85,78 94,76,92,63,79 63,87,89,19,81 72,90,71,96,16 85,92,78,11,37 50,17,68,82,66 21,9,39,69,73 30,63,90,5,45 26,15,28,84,65 1,23,0,12,17 61,98,21,39,56 67,51,3,8,42 54,91,9,70,93 75,58,89,53,19 77,64,45,78,14 7,31,99,42,51 87,95,60,10,84 98,35,66,42,85 75,27,97,54,9 16,15,60,44,49 28,19,51,24,50 59,18,37,88,39 69,29,49,9,76 4,83,64,33,2 67,81,88,70,39 85,73,97,15,8 7,13,26,12,1 57,3,65,28,87 36,31,51,19,0 56,77,41,20,76 79,29,80,60,66 55,61,8,30,15 2,42,3,17,40 10,56,91,52,23 76,39,75,82,49 50,36,99,9,53 92,66,48,31,41 16,51,80,95,23 36,84,33,56,11 49,46,32,78,85 67,29,94,26,22 76,6,30,37,0 27,94,79,48,4 55,81,22,18,88 93,15,59,41,11 67,43,24,92,65 5,1,60,99,62 2,51,42,84,82 80,28,43,93,72 81,57,13,45,66 34,22,53,37,3 31,46,70,77,79 17,12,22,53,74 23,49,52,60,40 64,98,97,75,57 58,81,85,89,92 42,34,65,87,18 13,8,54,25,11 84,72,66,78,1 22,82,48,85,62 68,99,18,3,57 64,41,80,94,71 45,5,56,30,62 10,50,78,13,34 90,97,85,36,0 86,35,80,55,74 47,99,59,61,18 79,87,81,45,95 24,91,27,18,16 51,35,34,46,48 39,40,6,70,99 1,82,63,32,50 78,68,27,17,65 74,15,21,38,24 82,97,49,7,58 19,23,87,79,22 57,93,30,1,69 64,13,40,21,89 3,95,20,79,59 80,46,91,54,1 62,66,30,60,47 26,99,55,25,2 47,83,7,71,81 9,72,12,20,96 28,57,82,98,42 34,59,18,69,1 68,38,46,19,80 43,39,48,84,87 32,78,5,65,50 86,13,20,22,70 31,6,52,53,18 73,25,4,60,99 48,15,59,50,33 93,99,46,70,21 91,26,76,65,87 10,27,78,5,96 4,63,22,82,20 88,63,66,48,37 39,47,56,52,27 81,18,33,12,59 3,96,55,26,43 42,4,7,28,22 95,12,98,84,23 37,35,78,9,61 52,47,24,90,17 55,87,18,80,41 38,0,14,36,48 62,72,56,78,8 75,26,11,58,91 38,74,52,65,45 43,41,15,82,35 89,27,21,54,0 43,36,85,68,60 26,89,84,10,80 87,50,75,81,35 12,46,6,70,59 93,51,66,33,49 68,32,0,63,54 20,92,39,89,17 48,60,87,36,14 93,76,83,10,55 64,74,80,11,41 9,32,11,41,87 78,22,8,72,75 6,51,29,90,50 21,68,47,2,7 52,19,36,57,58 83,36,25,31,99 86,29,47,77,38 13,51,20,59,27 74,50,9,11,44 52,95,81,2,70 96,47,14,73,59 84,87,7,4,46 60,27,79,53,30 58,28,55,5,43 91,75,63,35,52 41,66,27,50,56 76,60,80,85,23 3,21,37,74,95 9,92,43,5,98 79,49,88,24,70 59,18,57,90,13 79,29,12,2,0 84,58,38,77,96 33,89,43,11,44 93,23,98,60,51 58,86,28,17,1 6,4,81,55,53 84,27,38,12,83 50,43,40,85,88 26,72,25,41,44 14,92,7,98,12 44,11,71,64,26 88,8,2,56,6 59,0,15,33,51 10,52,89,53,34 52,4,5,63,50 15,8,60,70,13 33,79,21,39,34 84,91,30,12,71 61,31,41,9,66 43,67,52,92,54 17,21,71,78,60 19,0,88,61,2 14,66,87,12,37 89,23,25,4,24 41,62,7,66,33 59,87,84,80,71 73,97,25,85,60 86,64,61,54,83 22,18,63,81,27 92,89,50,11,73 41,48,62,80,78 46,55,81,16,94 97,45,5,13,40 14,75,22,42,2".split(" ")
calls = [int(d) for d in data[0].split(",")]
boards = []; done = False
for i in range(0, len(data[1:]), 5):
    b = []
    for j in range(0, 5):
        b.append([int(d) for d in data[1:][i + j].split(",")])
    boards.append(b)
#--
for i in range(1, len(calls)):
    call = calls[0:i]
    for board in boards:
        nums = []; cols = []; rows = board
        while len(cols) < len(rows):
            col = []
            for row in rows:
                for n in row:
                    if n not in nums:
                        nums.append(n)
                col.append(row[len(cols)])
            cols.append(col)
        #--
        for line in rows+cols:
            # print("LINE="+str(line))
            test = [n for n in line if n in call]
            if len(test) == len(line):
                print("CALL="+str(call)+".")
                print("NUMS="+str(nums)+".")
                print("BOARD="+str(board)+".")
                print("LINE="+str(test)+".")
                print("STEP="+str(len(call))+"/"+str(len(calls))+".")
                print("LAST="+str(call[-1:][0])+".")
                print(reduce(lambda a, b: a + b ,[n for n in nums if n not in call]) * call[-1:][0])
                done = True; break
        if done: break
    if done: break
#==
2496
            
###
# 4B
###
from functools import reduce
data = "76,69,38,62,33,48,81,2,64,21,80,90,29,99,37,15,93,46,75,0,89,56,58,40,92,47,8,6,54,96,12,66,83,4,70,19,17,5,50,52,45,51,18,27,49,71,28,86,74,77,11,20,84,72,23,31,16,78,91,65,87,79,73,94,24,68,63,9,88,82,30,42,60,13,67,85,44,59,7,53,22,1,26,41,61,55,43,39,3,35,25,34,57,10,14,32,97,95,36,98 17,45,62,28,73 39,12,0,52,5 87,48,50,85,44 66,57,78,94,3 91,37,69,16,1 1,67,4,58,13 25,54,34,63,87 59,70,66,72,71 33,17,8,20,85 69,46,50,41,88 47,63,80,15,90 24,1,40,94,13 56,62,74,81,95 43,88,37,99,22 57,52,33,84,49 33,58,54,28,10 7,82,97,66,92 95,77,5,86,84 85,91,94,21,69 23,12,13,98,46 1,63,58,23,0 67,14,45,42,32 48,64,83,10,13 74,16,3,79,46 44,52,95,25,6 93,47,5,96,28 88,76,70,0,72 77,1,36,54,9 14,17,75,64,15 79,66,61,78,26 23,75,96,71,76 63,59,39,65,36 95,21,67,41,74 9,97,4,2,49 32,17,81,0,56 77,53,30,94,5 4,42,87,25,24 52,15,68,9,45 56,89,98,47,34 99,32,27,78,46 75,70,99,65,41 87,6,11,88,1 4,42,64,98,78 63,50,69,79,39 67,46,17,97,26 26,73,6,79,47 67,51,64,16,60 8,1,61,76,39 13,57,48,65,46 63,83,4,92,71 97,93,21,88,80 58,42,53,95,90 49,29,30,26,22 66,51,75,8,13 5,39,19,4,96 77,16,33,1,6 54,91,60,56,88 4,59,24,79,22 36,49,17,97,27 67,99,92,62,86 78,18,59,74,54 79,68,23,51,85 47,42,92,58,12 30,97,19,26,15 1,62,94,65,70 6,91,56,55,11 58,96,21,50,53 51,60,67,64,71 12,25,44,47,39 15,92,81,9,38 98,16,31,21,30 58,10,3,89,7 79,20,60,74,26 86,4,83,96,15 94,29,44,41,34 50,75,83,20,52 65,85,41,78,38 31,64,86,32,10 25,82,13,61,22 11,73,4,77,24 56,74,26,20,62 83,46,41,24,52 34,28,76,80,36 75,48,63,17,55 69,47,22,45,60 17,15,71,28,68 12,76,27,25,14 34,39,31,58,13 75,67,2,26,42 72,43,0,23,54 37,43,18,76,47 96,1,80,77,27 13,89,16,4,6 74,92,55,99,38 19,75,52,85,81 69,51,39,95,98 90,61,91,6,21 25,57,81,10,49 67,55,43,96,17 78,11,3,64,77 51,66,8,62,60 82,94,24,54,26 59,91,97,37,77 20,25,69,98,84 38,12,65,35,61 7,26,91,84,17 23,52,86,19,24 58,44,5,32,40 6,27,89,76,92 33,10,90,83,82 44,61,68,70,87 23,17,90,93,21 92,54,95,46,14 47,24,89,33,31 26,80,35,42,78 88,80,50,46,26 1,97,92,51,74 16,24,40,31,95 47,85,61,99,12 27,8,25,42,13 8,59,37,87,44 62,0,67,39,92 79,81,54,24,93 56,84,23,18,34 72,68,29,11,91 64,51,81,44,12 49,20,23,36,53 59,73,37,60,57 96,65,5,43,14 46,31,47,87,1 11,13,72,30,3 67,20,84,59,77 52,87,97,51,16 43,36,21,33,82 41,96,91,93,29 7,31,19,87,94 92,68,18,57,23 5,88,81,86,10 99,50,37,33,25 97,22,0,53,91 78,39,41,44,89 91,82,71,42,37 25,93,67,53,9 84,23,33,92,14 74,45,57,86,50 79,83,10,85,48 51,29,93,87,21 58,5,52,37,99 80,1,18,46,42 60,92,0,44,59 79,76,54,14,42 57,11,39,66,33 86,62,27,61,26 48,68,47,99,46 78,90,9,36,98 76,79,66,38,65 67,91,90,41,93 2,1,33,56,50 46,9,0,61,62 26,58,16,24,10 20,22,86,58,14 53,74,54,85,6 2,96,40,72,78 99,81,16,31,55 11,57,62,51,32 8,51,73,40,88 83,35,37,98,27 3,42,15,14,33 2,38,52,82,71 67,55,9,66,53 94,99,54,18,14 40,56,57,66,68 28,74,48,30,0 59,1,22,50,23 13,71,6,26,15 28,60,66,25,56 49,68,84,10,38 73,50,87,16,14 79,26,29,18,2 57,22,5,48,91 61,78,3,95,87 6,62,25,74,84 22,71,93,57,20 81,33,15,45,96 38,14,19,72,26 51,19,62,72,39 36,83,6,33,9 95,43,42,2,22 94,99,23,97,11 66,61,16,30,35 51,38,7,24,82 23,12,46,55,85 43,97,45,61,67 53,2,77,99,34 17,93,25,9,72 37,32,35,63,93 40,16,51,99,88 73,69,49,80,33 56,54,18,87,71 29,98,85,58,17 38,4,55,72,33 29,63,86,52,75 7,47,34,53,14 89,39,83,36,78 6,21,15,18,96 56,19,40,0,7 61,33,50,66,54 93,91,64,6,45 51,90,94,18,37 15,28,13,2,44 18,79,4,56,15 38,80,8,42,5 60,11,53,23,27 9,71,19,83,72 39,97,98,99,7 90,22,41,95,15 20,18,7,70,49 97,51,79,94,77 31,89,50,40,9 37,84,6,98,35 38,56,94,55,0 92,84,8,85,73 86,81,76,35,1 62,5,59,77,72 79,97,60,11,70 43,98,87,97,70 53,55,35,8,64 80,59,75,11,2 17,95,13,38,90 31,20,60,84,4 38,19,10,73,86 37,72,66,22,53 6,41,20,21,92 0,13,9,89,17 43,61,80,60,65 61,50,42,99,26 11,51,52,83,64 92,60,2,91,20 95,10,14,94,98 5,37,90,17,69 82,48,51,32,78 30,39,10,84,69 94,5,60,92,89 95,31,64,67,23 96,20,33,66,61 33,92,78,24,74 45,34,73,5,57 18,37,69,44,38 25,30,53,87,64 28,23,14,10,81 39,82,40,64,86 26,81,3,85,50 71,75,91,65,96 17,55,8,56,59 22,36,73,90,0 18,67,50,70,71 83,8,75,55,29 66,33,39,88,16 32,84,78,59,0 11,3,61,65,36 1,12,66,59,9 24,97,75,83,11 45,16,14,31,71 85,43,99,18,15 61,56,80,69,29 18,50,86,53,71 67,36,14,24,55 52,30,33,54,81 72,51,39,28,42 45,98,78,35,73 60,86,68,58,37 17,78,43,31,96 33,61,34,45,36 10,29,83,98,2 88,73,7,84,50 30,21,94,31,4 20,68,91,55,51 10,98,2,25,84 64,97,29,28,58 75,17,76,54,65 17,11,88,9,66 1,59,60,79,55 30,46,83,67,91 23,45,99,90,6 81,33,8,13,76 25,68,43,59,51 56,14,41,52,16 62,36,12,37,71 83,90,81,91,0 95,92,29,54,26 53,84,85,18,10 51,44,87,86,67 4,81,82,77,30 26,68,80,57,71 22,83,47,61,14 41,89,38,14,66 70,92,26,97,53 78,25,5,4,48 54,86,31,23,0 99,73,6,20,98 18,81,96,60,47 59,87,95,15,57 34,17,26,7,42 25,90,45,94,5 10,41,32,20,98 37,9,20,82,83 84,14,62,3,76 86,67,95,40,65 57,26,1,19,69 49,41,29,35,13 29,74,69,92,48 80,47,59,18,13 98,5,64,89,83 37,97,90,32,49 25,87,39,21,63 1,61,5,82,66 87,75,18,23,63 38,51,33,59,4 21,14,17,97,92 94,45,84,22,10 86,93,8,99,54 1,4,37,30,34 80,17,50,74,97 28,11,6,85,78 94,76,92,63,79 63,87,89,19,81 72,90,71,96,16 85,92,78,11,37 50,17,68,82,66 21,9,39,69,73 30,63,90,5,45 26,15,28,84,65 1,23,0,12,17 61,98,21,39,56 67,51,3,8,42 54,91,9,70,93 75,58,89,53,19 77,64,45,78,14 7,31,99,42,51 87,95,60,10,84 98,35,66,42,85 75,27,97,54,9 16,15,60,44,49 28,19,51,24,50 59,18,37,88,39 69,29,49,9,76 4,83,64,33,2 67,81,88,70,39 85,73,97,15,8 7,13,26,12,1 57,3,65,28,87 36,31,51,19,0 56,77,41,20,76 79,29,80,60,66 55,61,8,30,15 2,42,3,17,40 10,56,91,52,23 76,39,75,82,49 50,36,99,9,53 92,66,48,31,41 16,51,80,95,23 36,84,33,56,11 49,46,32,78,85 67,29,94,26,22 76,6,30,37,0 27,94,79,48,4 55,81,22,18,88 93,15,59,41,11 67,43,24,92,65 5,1,60,99,62 2,51,42,84,82 80,28,43,93,72 81,57,13,45,66 34,22,53,37,3 31,46,70,77,79 17,12,22,53,74 23,49,52,60,40 64,98,97,75,57 58,81,85,89,92 42,34,65,87,18 13,8,54,25,11 84,72,66,78,1 22,82,48,85,62 68,99,18,3,57 64,41,80,94,71 45,5,56,30,62 10,50,78,13,34 90,97,85,36,0 86,35,80,55,74 47,99,59,61,18 79,87,81,45,95 24,91,27,18,16 51,35,34,46,48 39,40,6,70,99 1,82,63,32,50 78,68,27,17,65 74,15,21,38,24 82,97,49,7,58 19,23,87,79,22 57,93,30,1,69 64,13,40,21,89 3,95,20,79,59 80,46,91,54,1 62,66,30,60,47 26,99,55,25,2 47,83,7,71,81 9,72,12,20,96 28,57,82,98,42 34,59,18,69,1 68,38,46,19,80 43,39,48,84,87 32,78,5,65,50 86,13,20,22,70 31,6,52,53,18 73,25,4,60,99 48,15,59,50,33 93,99,46,70,21 91,26,76,65,87 10,27,78,5,96 4,63,22,82,20 88,63,66,48,37 39,47,56,52,27 81,18,33,12,59 3,96,55,26,43 42,4,7,28,22 95,12,98,84,23 37,35,78,9,61 52,47,24,90,17 55,87,18,80,41 38,0,14,36,48 62,72,56,78,8 75,26,11,58,91 38,74,52,65,45 43,41,15,82,35 89,27,21,54,0 43,36,85,68,60 26,89,84,10,80 87,50,75,81,35 12,46,6,70,59 93,51,66,33,49 68,32,0,63,54 20,92,39,89,17 48,60,87,36,14 93,76,83,10,55 64,74,80,11,41 9,32,11,41,87 78,22,8,72,75 6,51,29,90,50 21,68,47,2,7 52,19,36,57,58 83,36,25,31,99 86,29,47,77,38 13,51,20,59,27 74,50,9,11,44 52,95,81,2,70 96,47,14,73,59 84,87,7,4,46 60,27,79,53,30 58,28,55,5,43 91,75,63,35,52 41,66,27,50,56 76,60,80,85,23 3,21,37,74,95 9,92,43,5,98 79,49,88,24,70 59,18,57,90,13 79,29,12,2,0 84,58,38,77,96 33,89,43,11,44 93,23,98,60,51 58,86,28,17,1 6,4,81,55,53 84,27,38,12,83 50,43,40,85,88 26,72,25,41,44 14,92,7,98,12 44,11,71,64,26 88,8,2,56,6 59,0,15,33,51 10,52,89,53,34 52,4,5,63,50 15,8,60,70,13 33,79,21,39,34 84,91,30,12,71 61,31,41,9,66 43,67,52,92,54 17,21,71,78,60 19,0,88,61,2 14,66,87,12,37 89,23,25,4,24 41,62,7,66,33 59,87,84,80,71 73,97,25,85,60 86,64,61,54,83 22,18,63,81,27 92,89,50,11,73 41,48,62,80,78 46,55,81,16,94 97,45,5,13,40 14,75,22,42,2".split(" ")
calls = [int(d) for d in data[0].split(",")]
boards = []
outs = []
for i in range(0, len(data[1:]), 5):
    b = []
    for j in range(0, 5):
        b.append([int(d) for d in data[1:][i + j].split(",")])
    boards.append(b)
#--
for i in range(1, len(calls)):
    call = calls[0:i]
    b = 0
    for board in boards:
        cols = []; rows = board; nums = []
        while len(cols) < len(rows):
            col = []
            for row in rows:
                for n in row:
                    if n not in nums:
                        nums.append(n)
                col.append(row[len(cols)])
            cols.append(col)
        #--
        o = 0
        for line in rows+cols:
            test = [n for n in line if n in call]
            if len(test) == len(line) and b not in outs:
                print("CALL="+str(call)+", NUMS="+str(nums)+", BOARD="+str(board)+", LINE="+str(test)+", STEP="+str(len(call))+"/"+str(len(calls))+", LAST="+str(call[-1:][0])+".")
                print(str(reduce(lambda a, b: a + b ,[n for n in nums if n not in call]) * call[-1:][0]))
                outs.append(b)
                break
        b += 1
#==
25925

###
# 5A
###
data = [[int(e) for e in d.split(",")] for d in "561,579,965,175 735,73,316,73 981,566,981,11 631,588,631,910 919,964,70,115 122,463,261,602 502,248,774,248 636,797,797,958 444,815,444,554 734,97,734,210 871,692,368,692 842,261,606,261 332,43,206,43 371,220,18,573 594,782,127,782 952,953,72,73 13,143,755,885 827,741,827,168 65,84,839,858 299,598,299,588 478,76,607,76 656,748,61,153 566,447,857,447 497,19,310,206 354,721,538,721 124,17,124,339 105,595,843,595 686,902,919,669 683,183,776,183 415,45,415,942 16,852,843,25 945,954,23,32 935,174,485,624 712,297,792,297 495,90,497,90 836,259,836,988 12,59,916,963 72,648,72,185 625,400,507,282 809,206,809,538 472,909,472,213 847,162,189,162 178,233,178,777 404,276,404,516 943,178,400,721 882,429,882,920 12,976,900,88 33,53,958,53 104,37,609,542 207,736,800,143 331,454,331,715 956,52,26,982 189,544,189,368 194,258,451,258 75,383,75,642 770,861,915,716 300,330,300,683 649,175,344,175 948,25,42,931 245,313,748,816 677,126,677,204 507,948,507,88 343,229,343,677 946,933,472,459 830,403,830,660 626,651,626,213 828,932,828,487 792,101,216,101 870,111,50,931 770,464,290,944 264,700,941,23 894,846,630,846 19,40,957,978 911,425,393,425 26,594,26,475 754,287,754,302 105,483,807,483 25,902,684,243 300,164,532,396 79,346,79,423 649,234,649,331 113,115,962,964 251,50,531,330 908,177,908,817 905,106,905,570 958,55,41,972 985,984,62,61 794,802,328,802 984,273,370,887 271,758,237,792 443,534,835,926 367,762,367,521 527,737,717,737 89,921,89,299 521,279,108,279 810,344,760,394 292,944,292,941 265,471,265,949 923,378,415,886 125,656,434,656 51,460,51,542 297,178,297,587 432,122,241,122 916,855,451,390 48,838,636,838 802,659,784,641 316,961,417,961 342,675,568,675 345,60,352,60 495,595,284,806 111,975,815,271 315,239,315,333 14,16,930,932 380,373,380,346 212,141,212,691 415,555,651,319 497,565,96,164 902,451,735,451 118,751,521,751 923,680,613,370 641,897,233,489 804,447,259,447 556,751,968,751 409,638,409,65 512,50,432,130 28,25,988,985 563,888,563,502 912,691,950,691 592,934,592,433 465,886,408,886 928,547,671,290 486,953,496,943 942,943,42,43 672,759,266,759 587,195,763,371 95,354,687,946 890,280,734,124 945,906,945,168 306,952,306,257 143,160,810,827 988,407,167,407 274,472,817,472 252,113,430,291 294,767,176,767 456,142,423,142 908,107,176,839 255,278,447,86 100,44,969,913 899,184,899,986 872,877,47,52 122,786,228,786 132,777,312,777 242,86,36,86 726,671,690,635 386,859,790,455 468,62,636,62 920,869,920,790 610,66,633,43 428,962,428,717 935,881,278,224 314,204,458,204 906,515,712,515 332,223,744,223 707,802,842,802 775,36,946,207 906,206,142,970 534,312,534,622 26,687,26,417 758,258,688,188 830,591,830,286 856,182,924,182 78,755,78,880 157,726,157,904 316,30,752,30 958,977,10,29 831,813,284,813 472,843,989,326 133,99,133,537 161,540,846,540 176,739,78,739 28,33,969,974 65,160,879,974 355,943,355,685 893,512,225,512 789,565,789,81 253,832,943,832 372,716,372,605 781,293,702,293 469,497,469,149 692,499,933,258 477,548,477,849 131,894,131,483 934,765,13,765 830,55,436,449 615,496,531,412 78,634,78,115 205,586,205,661 871,742,871,590 218,223,218,741 56,897,872,81 30,886,728,188 369,877,369,963 202,55,930,783 251,131,251,749 498,313,498,126 688,876,188,876 147,968,607,508 400,693,235,693 206,853,206,211 401,158,187,158 35,957,973,19 517,822,517,282 836,492,433,895 751,114,100,114 80,359,710,359 302,871,812,871 853,159,853,548 351,663,451,763 895,260,307,848 369,455,812,455 936,594,393,51 55,696,972,696 422,804,192,804 110,893,120,883 747,645,747,181 636,344,636,88 15,949,543,421 985,948,51,14 164,435,164,27 30,966,965,31 600,472,985,472 119,161,91,161 180,521,180,802 98,70,449,70 157,190,613,190 816,501,338,23 387,219,387,75 115,579,115,734 26,153,26,450 733,783,462,783 19,893,759,893 646,726,286,726 631,139,631,664 490,668,490,231 282,958,282,816 338,55,898,55 891,420,443,420 222,917,222,759 302,430,465,430 946,49,946,753 101,971,879,193 329,122,888,122 524,714,154,344 89,769,552,306 749,680,749,536 161,510,161,317 143,608,543,608 677,526,658,526 348,956,512,956 851,973,358,480 850,247,56,247 284,274,381,274 855,944,101,190 338,102,467,102 225,875,225,303 120,944,945,119 485,386,305,386 321,866,627,866 44,207,44,244 514,763,514,578 617,930,617,371 963,838,451,326 813,904,174,265 901,983,512,594 979,929,527,477 533,383,59,857 871,724,828,767 174,133,174,75 686,911,15,911 361,406,440,327 759,284,275,284 231,431,203,431 759,673,839,673 914,897,914,937 598,643,598,722 697,297,697,55 735,918,735,81 375,538,375,403 868,86,170,784 390,142,390,553 569,564,569,800 514,276,717,73 756,768,182,768 349,428,349,364 370,386,370,621 191,224,191,447 672,983,209,983 281,854,872,854 898,959,898,207 961,597,561,197 965,837,338,210 120,675,914,675 401,661,401,167 706,536,706,598 856,337,283,910 980,535,156,535 941,888,179,126 585,47,933,395 481,435,481,818 989,978,45,34 693,332,693,528 863,605,507,961 586,429,252,429 37,61,962,986 952,26,16,962 926,492,863,492 661,110,279,110 524,879,176,879 298,424,858,984 498,627,498,963 468,608,256,820 61,491,472,491 38,922,938,22 361,938,361,46 567,981,567,973 399,575,902,72 618,740,818,540 79,115,929,965 612,972,612,698 217,626,474,369 961,593,961,70 287,450,287,676 703,45,871,45 756,778,410,778 960,970,42,52 254,513,554,813 620,339,601,320 650,344,650,33 597,349,597,491 761,106,891,236 323,846,883,846 678,190,134,190 400,848,400,271 198,68,463,68 522,805,522,445 979,134,719,134 584,493,584,471 635,10,635,768 867,795,31,795 157,824,939,42 354,381,653,381 45,628,45,860 959,870,808,719 587,810,291,810 248,34,83,199 656,505,656,388 966,90,966,934 957,834,267,144 690,367,447,367 153,948,153,510 467,260,467,332 69,43,931,905 913,92,913,827 226,504,226,615 21,737,21,819 391,289,391,341 566,639,723,639 160,824,167,824 77,69,379,371 756,864,756,960 315,569,927,569 964,864,964,167 136,277,136,184 524,450,898,450 971,903,222,903 962,958,70,66 525,570,45,90 164,352,164,433 703,61,668,61 289,136,768,136 50,65,861,876 676,199,676,411 294,370,56,132 299,840,620,840 845,776,845,66 61,18,909,866 738,670,738,438 974,618,974,169 669,800,607,800 935,427,537,427 441,898,441,462 490,768,490,239 275,788,947,116 650,412,493,255 382,89,950,89 865,194,865,266 977,677,459,677 128,18,985,875 199,646,199,611 666,149,666,504 129,539,129,266 332,364,332,211 619,132,619,580 426,69,426,236 123,334,22,334 792,57,449,57 33,976,987,22 221,614,809,614 245,379,280,379 895,238,895,500 957,423,119,423 917,50,346,621 183,263,708,263 452,174,452,216 404,681,287,798 931,54,474,54 815,264,151,928 736,507,295,66 200,160,901,861 709,975,100,366 126,468,393,201 822,627,287,92 101,285,176,285 250,581,250,799 257,446,257,927 436,423,640,219 468,229,987,748 394,245,501,245 37,931,684,931 123,54,123,453 75,364,758,364 256,62,143,62 933,299,933,410 313,887,313,34 453,833,457,833 614,87,614,816 48,113,48,646 977,571,977,967 982,989,32,39 773,749,239,215 983,989,218,224 885,606,169,606 63,53,63,29 96,870,820,870 544,895,389,740 61,246,296,246 812,82,53,841 749,399,749,935 882,168,274,168 566,673,499,606 572,558,806,792 923,79,923,844 875,416,875,112 393,18,393,149 389,844,147,844 207,157,207,949 467,644,728,644 36,29,587,29 448,370,448,247 43,283,43,122 709,837,709,265 294,273,98,273 625,869,26,270 156,26,145,26 393,544,393,456 708,536,64,536 324,519,324,950 138,788,533,788 117,818,254,681 953,766,306,119 669,325,669,940 421,416,715,416 886,101,886,371 786,656,786,169 123,641,622,142 658,504,985,177 440,505,74,139 300,616,300,473 265,729,983,11 501,396,274,396 877,123,113,887 544,78,544,604 287,944,287,391 766,854,97,185 959,49,127,881 715,727,715,647 339,557,339,610 19,133,87,133 872,94,932,94 966,935,95,64 137,942,918,161 162,718,598,282 256,18,256,47 597,658,314,941 817,685,137,685 20,14,988,982 970,916,100,46 672,152,672,842 468,825,468,911 673,731,267,325".split(" ")]
size = [0, 0]
for d in data:
    x1 = d[0]
    y1 = d[1]
    x2 = d[2]
    y2 = d[3]
    if x1 > size[0]: size[0] = x1
    if x2 > size[0]: size[0] = x2
    if y1 > size[1]: size[1] = y1
    if y2 > size[1]: size[1] = y2
diag = []
for y in range(0, size[1]+1):
    diag.append([])
    for x in range(0, size[0]+1):
        diag[y].append(0)
#--
def show(d):
    [print(str(e).replace("[", "").replace("]", "").replace(",", "")) for e in d]
    
def points(a, b):
    p = []
    m = (a[0] - b[0])
    n = (a[1] - b[1])
    #--
    if a[0] == b[0] or a[1] == b[1]: pass
    else: return [p, [m, n]]
    #--
    if m != n and (m > 0 and n > 0):
        print("---")
        print("System failure!")
        exit(0)
    #--
    x = a[0]
    y = a[1]
    c = [c for c in [m, n] if c != 0][0]
    p.append([x, y])
    for i in range(0, abs(c)):
        if x < b[0]: x += 1
        if x > b[0]: x -= 1
        if y < b[1]: y += 1
        if y > b[1]: y -= 1
        p.append([x, y])
    return [p, [m, n]]
        
def update(d, p):
    d[p[1]][p[0]] += 1
#--
for d in data:
    a = [d[0], d[1]]
    b = [d[2], d[3]]
    p = points(a, b)
    if len(p[0]) > 0:
        print("---")
        print(str(a)+"->"+str(b)+"="+str(p[0])+", "+str(p[1])+".")
        for i in p[0]:
            update(diag, i)
#--
r = 0
for row in diag:
    for col in row:
        if col > 1: r += 1
print("===")
print(r)
#==
6005
            
###
# 5B
###
data = [[int(e) for e in d.split(",")] for d in "561,579,965,175 735,73,316,73 981,566,981,11 631,588,631,910 919,964,70,115 122,463,261,602 502,248,774,248 636,797,797,958 444,815,444,554 734,97,734,210 871,692,368,692 842,261,606,261 332,43,206,43 371,220,18,573 594,782,127,782 952,953,72,73 13,143,755,885 827,741,827,168 65,84,839,858 299,598,299,588 478,76,607,76 656,748,61,153 566,447,857,447 497,19,310,206 354,721,538,721 124,17,124,339 105,595,843,595 686,902,919,669 683,183,776,183 415,45,415,942 16,852,843,25 945,954,23,32 935,174,485,624 712,297,792,297 495,90,497,90 836,259,836,988 12,59,916,963 72,648,72,185 625,400,507,282 809,206,809,538 472,909,472,213 847,162,189,162 178,233,178,777 404,276,404,516 943,178,400,721 882,429,882,920 12,976,900,88 33,53,958,53 104,37,609,542 207,736,800,143 331,454,331,715 956,52,26,982 189,544,189,368 194,258,451,258 75,383,75,642 770,861,915,716 300,330,300,683 649,175,344,175 948,25,42,931 245,313,748,816 677,126,677,204 507,948,507,88 343,229,343,677 946,933,472,459 830,403,830,660 626,651,626,213 828,932,828,487 792,101,216,101 870,111,50,931 770,464,290,944 264,700,941,23 894,846,630,846 19,40,957,978 911,425,393,425 26,594,26,475 754,287,754,302 105,483,807,483 25,902,684,243 300,164,532,396 79,346,79,423 649,234,649,331 113,115,962,964 251,50,531,330 908,177,908,817 905,106,905,570 958,55,41,972 985,984,62,61 794,802,328,802 984,273,370,887 271,758,237,792 443,534,835,926 367,762,367,521 527,737,717,737 89,921,89,299 521,279,108,279 810,344,760,394 292,944,292,941 265,471,265,949 923,378,415,886 125,656,434,656 51,460,51,542 297,178,297,587 432,122,241,122 916,855,451,390 48,838,636,838 802,659,784,641 316,961,417,961 342,675,568,675 345,60,352,60 495,595,284,806 111,975,815,271 315,239,315,333 14,16,930,932 380,373,380,346 212,141,212,691 415,555,651,319 497,565,96,164 902,451,735,451 118,751,521,751 923,680,613,370 641,897,233,489 804,447,259,447 556,751,968,751 409,638,409,65 512,50,432,130 28,25,988,985 563,888,563,502 912,691,950,691 592,934,592,433 465,886,408,886 928,547,671,290 486,953,496,943 942,943,42,43 672,759,266,759 587,195,763,371 95,354,687,946 890,280,734,124 945,906,945,168 306,952,306,257 143,160,810,827 988,407,167,407 274,472,817,472 252,113,430,291 294,767,176,767 456,142,423,142 908,107,176,839 255,278,447,86 100,44,969,913 899,184,899,986 872,877,47,52 122,786,228,786 132,777,312,777 242,86,36,86 726,671,690,635 386,859,790,455 468,62,636,62 920,869,920,790 610,66,633,43 428,962,428,717 935,881,278,224 314,204,458,204 906,515,712,515 332,223,744,223 707,802,842,802 775,36,946,207 906,206,142,970 534,312,534,622 26,687,26,417 758,258,688,188 830,591,830,286 856,182,924,182 78,755,78,880 157,726,157,904 316,30,752,30 958,977,10,29 831,813,284,813 472,843,989,326 133,99,133,537 161,540,846,540 176,739,78,739 28,33,969,974 65,160,879,974 355,943,355,685 893,512,225,512 789,565,789,81 253,832,943,832 372,716,372,605 781,293,702,293 469,497,469,149 692,499,933,258 477,548,477,849 131,894,131,483 934,765,13,765 830,55,436,449 615,496,531,412 78,634,78,115 205,586,205,661 871,742,871,590 218,223,218,741 56,897,872,81 30,886,728,188 369,877,369,963 202,55,930,783 251,131,251,749 498,313,498,126 688,876,188,876 147,968,607,508 400,693,235,693 206,853,206,211 401,158,187,158 35,957,973,19 517,822,517,282 836,492,433,895 751,114,100,114 80,359,710,359 302,871,812,871 853,159,853,548 351,663,451,763 895,260,307,848 369,455,812,455 936,594,393,51 55,696,972,696 422,804,192,804 110,893,120,883 747,645,747,181 636,344,636,88 15,949,543,421 985,948,51,14 164,435,164,27 30,966,965,31 600,472,985,472 119,161,91,161 180,521,180,802 98,70,449,70 157,190,613,190 816,501,338,23 387,219,387,75 115,579,115,734 26,153,26,450 733,783,462,783 19,893,759,893 646,726,286,726 631,139,631,664 490,668,490,231 282,958,282,816 338,55,898,55 891,420,443,420 222,917,222,759 302,430,465,430 946,49,946,753 101,971,879,193 329,122,888,122 524,714,154,344 89,769,552,306 749,680,749,536 161,510,161,317 143,608,543,608 677,526,658,526 348,956,512,956 851,973,358,480 850,247,56,247 284,274,381,274 855,944,101,190 338,102,467,102 225,875,225,303 120,944,945,119 485,386,305,386 321,866,627,866 44,207,44,244 514,763,514,578 617,930,617,371 963,838,451,326 813,904,174,265 901,983,512,594 979,929,527,477 533,383,59,857 871,724,828,767 174,133,174,75 686,911,15,911 361,406,440,327 759,284,275,284 231,431,203,431 759,673,839,673 914,897,914,937 598,643,598,722 697,297,697,55 735,918,735,81 375,538,375,403 868,86,170,784 390,142,390,553 569,564,569,800 514,276,717,73 756,768,182,768 349,428,349,364 370,386,370,621 191,224,191,447 672,983,209,983 281,854,872,854 898,959,898,207 961,597,561,197 965,837,338,210 120,675,914,675 401,661,401,167 706,536,706,598 856,337,283,910 980,535,156,535 941,888,179,126 585,47,933,395 481,435,481,818 989,978,45,34 693,332,693,528 863,605,507,961 586,429,252,429 37,61,962,986 952,26,16,962 926,492,863,492 661,110,279,110 524,879,176,879 298,424,858,984 498,627,498,963 468,608,256,820 61,491,472,491 38,922,938,22 361,938,361,46 567,981,567,973 399,575,902,72 618,740,818,540 79,115,929,965 612,972,612,698 217,626,474,369 961,593,961,70 287,450,287,676 703,45,871,45 756,778,410,778 960,970,42,52 254,513,554,813 620,339,601,320 650,344,650,33 597,349,597,491 761,106,891,236 323,846,883,846 678,190,134,190 400,848,400,271 198,68,463,68 522,805,522,445 979,134,719,134 584,493,584,471 635,10,635,768 867,795,31,795 157,824,939,42 354,381,653,381 45,628,45,860 959,870,808,719 587,810,291,810 248,34,83,199 656,505,656,388 966,90,966,934 957,834,267,144 690,367,447,367 153,948,153,510 467,260,467,332 69,43,931,905 913,92,913,827 226,504,226,615 21,737,21,819 391,289,391,341 566,639,723,639 160,824,167,824 77,69,379,371 756,864,756,960 315,569,927,569 964,864,964,167 136,277,136,184 524,450,898,450 971,903,222,903 962,958,70,66 525,570,45,90 164,352,164,433 703,61,668,61 289,136,768,136 50,65,861,876 676,199,676,411 294,370,56,132 299,840,620,840 845,776,845,66 61,18,909,866 738,670,738,438 974,618,974,169 669,800,607,800 935,427,537,427 441,898,441,462 490,768,490,239 275,788,947,116 650,412,493,255 382,89,950,89 865,194,865,266 977,677,459,677 128,18,985,875 199,646,199,611 666,149,666,504 129,539,129,266 332,364,332,211 619,132,619,580 426,69,426,236 123,334,22,334 792,57,449,57 33,976,987,22 221,614,809,614 245,379,280,379 895,238,895,500 957,423,119,423 917,50,346,621 183,263,708,263 452,174,452,216 404,681,287,798 931,54,474,54 815,264,151,928 736,507,295,66 200,160,901,861 709,975,100,366 126,468,393,201 822,627,287,92 101,285,176,285 250,581,250,799 257,446,257,927 436,423,640,219 468,229,987,748 394,245,501,245 37,931,684,931 123,54,123,453 75,364,758,364 256,62,143,62 933,299,933,410 313,887,313,34 453,833,457,833 614,87,614,816 48,113,48,646 977,571,977,967 982,989,32,39 773,749,239,215 983,989,218,224 885,606,169,606 63,53,63,29 96,870,820,870 544,895,389,740 61,246,296,246 812,82,53,841 749,399,749,935 882,168,274,168 566,673,499,606 572,558,806,792 923,79,923,844 875,416,875,112 393,18,393,149 389,844,147,844 207,157,207,949 467,644,728,644 36,29,587,29 448,370,448,247 43,283,43,122 709,837,709,265 294,273,98,273 625,869,26,270 156,26,145,26 393,544,393,456 708,536,64,536 324,519,324,950 138,788,533,788 117,818,254,681 953,766,306,119 669,325,669,940 421,416,715,416 886,101,886,371 786,656,786,169 123,641,622,142 658,504,985,177 440,505,74,139 300,616,300,473 265,729,983,11 501,396,274,396 877,123,113,887 544,78,544,604 287,944,287,391 766,854,97,185 959,49,127,881 715,727,715,647 339,557,339,610 19,133,87,133 872,94,932,94 966,935,95,64 137,942,918,161 162,718,598,282 256,18,256,47 597,658,314,941 817,685,137,685 20,14,988,982 970,916,100,46 672,152,672,842 468,825,468,911 673,731,267,325".split(" ")]
size = [0, 0]
for d in data:
    x1 = d[0]
    y1 = d[1]
    x2 = d[2]
    y2 = d[3]
    if x1 > size[0]: size[0] = x1
    if x2 > size[0]: size[0] = x2
    if y1 > size[1]: size[1] = y1
    if y2 > size[1]: size[1] = y2
diag = []
for y in range(0, size[1]+1):
    diag.append([])
    for x in range(0, size[0]+1):
        diag[y].append(0)
#--
def show(d):
    print("---")
    [print(str(e).replace("[", "").replace("]", "").replace(",", "")) for e in d]
    
def points(a, b):
    p = []
    m = (a[0] - b[0])
    n = (a[1] - b[1])
    #--
    if m != n and (m > 0 and n > 0):
        print("---")
        print("System failure!")
        exit(0)
    #--
    x = a[0]
    y = a[1]
    c = [c for c in [m, n] if c != 0][0]
    p.append([x, y])
    for i in range(0, abs(c)):
        if x < b[0]: x += 1
        if x > b[0]: x -= 1
        if y < b[1]: y += 1
        if y > b[1]: y -= 1
        p.append([x, y])
    return [p, [m, n]]
        
def update(d, p):
    d[p[1]][p[0]] += 1
#--
for d in data:
    a = [d[0], d[1]]
    b = [d[2], d[3]]
    p = points(a, b)
    if len(p[0]) > 0:
        print("---")
        print(str(a)+"->"+str(b)+"="+str(p[0])+", "+str(p[1])+".")
        for i in p[0]:
            update(diag, i)
#--
r = 0
for row in diag:
    for col in row:
        if col > 1: r += 1
print("===")
print(r)
#==
23864

###
# 6A
###
days = 80
data = [int(d) for d in "1,4,1,1,1,1,5,1,1,5,1,4,2,5,1,2,3,1,1,1,1,5,4,2,1,1,3,1,1,1,1,1,1,1,2,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,4,1,1,1,1,5,1,4,1,1,4,1,1,1,1,4,1,1,5,5,1,1,1,4,1,1,1,1,1,3,2,1,1,1,1,1,2,3,1,1,2,1,1,1,3,1,1,1,2,1,2,1,1,2,1,1,3,1,1,1,3,3,5,1,4,1,1,5,1,1,4,1,5,3,3,5,1,1,1,4,1,1,1,1,1,1,5,5,1,1,4,1,2,1,1,1,1,2,2,2,1,1,2,2,4,1,1,1,1,3,1,2,3,4,1,1,1,4,4,1,1,1,1,1,1,1,4,2,5,2,1,1,4,1,1,5,1,1,5,1,5,5,1,3,5,1,1,5,1,1,2,2,1,1,1,1,1,1,1,4,3,1,1,4,1,4,1,1,1,1,4,1,4,4,4,3,1,1,3,2,1,1,1,1,1,1,1,4,1,3,1,1,1,1,1,1,1,5,2,4,2,1,4,4,1,5,1,1,3,1,3,1,1,1,1,1,4,2,3,2,1,1,2,1,5,2,1,1,4,1,4,1,1,1,4,4,1,1,1,1,1,1,4,1,1,1,2,1,1,2".split(",")]
for day in range(0, days):
    for i in range(0, len(data)):
        if data[i] == 0:
            data[i] = 6
            data.append(8)
        else:
            data[i] -= 1
    print(str(day+1) + ": " + str(len(data)))
#==
385391

###
# 6B
###
from copy import deepcopy as dc
days = 256
data = [int(d) for d in "1,4,1,1,1,1,5,1,1,5,1,4,2,5,1,2,3,1,1,1,1,5,4,2,1,1,3,1,1,1,1,1,1,1,2,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,4,1,1,1,1,5,1,4,1,1,4,1,1,1,1,4,1,1,5,5,1,1,1,4,1,1,1,1,1,3,2,1,1,1,1,1,2,3,1,1,2,1,1,1,3,1,1,1,2,1,2,1,1,2,1,1,3,1,1,1,3,3,5,1,4,1,1,5,1,1,4,1,5,3,3,5,1,1,1,4,1,1,1,1,1,1,5,5,1,1,4,1,2,1,1,1,1,2,2,2,1,1,2,2,4,1,1,1,1,3,1,2,3,4,1,1,1,4,4,1,1,1,1,1,1,1,4,2,5,2,1,1,4,1,1,5,1,1,5,1,5,5,1,3,5,1,1,5,1,1,2,2,1,1,1,1,1,1,1,4,3,1,1,4,1,4,1,1,1,1,4,1,4,4,4,3,1,1,3,2,1,1,1,1,1,1,1,4,1,3,1,1,1,1,1,1,1,5,2,4,2,1,4,4,1,5,1,1,3,1,3,1,1,1,1,1,4,2,3,2,1,1,2,1,5,2,1,1,4,1,4,1,1,1,4,4,1,1,1,1,1,1,4,1,1,1,2,1,1,2".split(",")]
data.sort(); old = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0}
#--
for i in range(0, len(data)):
    old[data[i]] += 1
for d in range(0, days):
    new = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0}
    for k,v in old.items():
        if k == 0:
            new[6] += v
            new[8] += v
        else:
            new[k-1] += v
    #--
    s = 0;
    for k,v in new.items(): s += v
    print("DAY="+str(d+1)+", NEW="+str(new)+", SUM="+str(s)+".")
    old = dc(new)
#==
1728611055389

###
# 7A
###
from functools import reduce
data = [int(d) for d in "1101,1,29,67,1102,0,1,65,1008,65,35,66,1005,66,28,1,67,65,20,4,0,1001,65,1,65,1106,0,8,99,35,67,101,99,105,32,110,39,101,115,116,32,112,97,115,32,117,110,101,32,105,110,116,99,111,100,101,32,112,114,111,103,114,97,109,10,231,350,1278,139,664,182,40,377,157,886,184,138,727,661,904,24,77,349,608,1346,963,12,759,112,129,818,1046,600,43,523,709,1002,2,202,212,11,264,0,505,956,163,560,128,299,0,229,4,33,1402,268,418,1435,151,786,727,100,248,57,763,311,206,67,997,379,378,332,0,23,143,93,389,815,11,66,873,1414,7,7,681,140,288,390,434,314,215,360,3,317,463,294,0,33,801,1417,54,782,937,94,102,95,15,177,649,45,107,695,100,49,193,636,263,177,932,345,706,99,28,211,449,442,117,7,467,101,732,947,818,346,87,78,285,236,707,912,1652,294,333,706,758,1621,782,246,546,663,699,177,94,221,746,66,170,514,364,751,1486,157,54,38,1469,0,79,83,1060,422,252,27,1332,386,523,41,934,988,278,409,438,61,1047,260,300,240,0,496,1392,181,268,413,544,1169,662,566,4,988,267,1259,250,346,319,235,172,728,1621,505,1490,17,104,711,714,1139,497,603,759,393,1184,60,369,1326,333,45,51,118,1171,29,1560,252,139,481,1160,177,555,150,115,129,237,1672,613,1311,999,217,20,936,323,116,60,198,644,718,69,594,1142,607,854,878,926,515,29,2,740,1281,74,1406,47,88,249,1416,1263,943,1477,39,123,1919,37,167,227,478,405,421,316,335,1375,359,498,173,507,456,40,226,160,927,229,848,6,1174,1107,710,13,480,1249,817,85,80,128,12,48,243,576,199,208,338,1521,1167,282,690,16,362,791,25,435,495,1217,1215,387,36,1620,166,1586,345,698,541,590,277,328,85,862,751,1273,950,817,77,749,198,156,212,404,6,197,425,582,453,59,45,1059,1058,389,178,547,847,670,559,81,1180,220,1338,216,1528,629,601,802,903,207,352,228,29,761,477,161,268,228,647,80,110,402,470,714,439,511,13,70,277,746,492,657,1215,146,201,63,84,1158,1615,513,1182,83,73,60,22,221,888,344,27,205,1344,325,1362,102,1396,1117,426,80,497,458,11,218,165,221,649,524,264,251,617,825,172,1120,931,520,112,1286,818,1464,11,1,83,184,320,152,730,744,409,604,73,1205,411,732,1078,775,334,130,202,716,368,734,794,723,1140,367,222,435,596,566,719,1046,1428,797,470,124,380,1833,180,62,714,1112,772,26,89,445,9,147,76,764,267,1400,6,275,69,292,143,522,376,797,73,136,688,30,417,1835,47,54,19,32,565,85,320,426,771,66,1656,740,75,10,284,23,14,65,719,1719,874,426,599,314,445,796,994,467,49,0,1141,248,957,50,1024,427,696,533,1284,811,89,17,597,463,1501,13,199,701,53,318,7,628,608,147,291,22,518,191,1243,333,88,12,138,363,262,753,467,456,74,1047,15,339,234,612,452,424,340,481,13,4,303,30,908,1069,1018,1584,426,192,304,337,326,1087,406,132,449,1142,279,307,315,1445,113,49,705,120,187,4,798,960,431,214,1051,848,54,845,64,83,1059,813,1390,1008,237,469,156,61,635,1074,1621,523,24,140,141,715,1124,402,400,204,18,452,1107,453,377,467,241,340,35,320,799,680,5,123,43,1614,1774,549,651,163,700,776,65,336,145,426,150,1049,113,1346,434,45,521,729,55,1448,85,1133,1421,375,1398,319,206,606,68,1597,716,1507,963,141,95,72,33,1242,251,448,1337,1132,83,1779,284,58,625,253,1247,344,47,1194,1047,190,538,103,322,652,44,422,53,31,345,1346,27,768,1006,179,447,1318,199,92,364,141,121,276,284,847,462,700,780,360,843,1430,185,69,635,292,413,43,71,240,15,787,379,1353,173,305,227,118,844,632,471,523,1139,8,811,355,811,223,37,267,438,1011,58,39,64,422,167,844,165,80,618,1115,194,547,47,99,639,171,43,246,104,1429,510,127,125,1035,290,839,1060,26,160,31,570,623,80,1246,645,1396,99,543,159,525,211,446,209,885,512,1483,479,716,417,268,583,1467,573,553,95,729,1589,207,67,224,243,426,283,398,612,596,248,282,180,94,405,148,429,37,116,582,32,253,282,832,94,154,338,75,404,651,365,1436,60,266,1163,982,69,958,751,1693,850,1257,1294,429,120,133,741,564,328,315,1268,98,20,14,114,478,20,344,631,1296,24,1611,487,659,355,1336,20,1197,515,13,1165,1007,1403,1473,126,461,431,15,136,730,449,1109,1146,1210,944,158,742,1586,380,1051,41,1250,915,1417,681,642,70,1789,54,161,1568,676,113,287,338,127,1168,615,421,215".split(",")]
data.sort()
#--
m = data[int(len(data)/2)]
print(str(data)+", "+str(m)+".")
print(reduce(lambda a, b: a + b, [abs(d - m) for d in data]))
#==
348996

###
# 7B
###
import sys
from functools import reduce
data = [int(d) for d in "1101,1,29,67,1102,0,1,65,1008,65,35,66,1005,66,28,1,67,65,20,4,0,1001,65,1,65,1106,0,8,99,35,67,101,99,105,32,110,39,101,115,116,32,112,97,115,32,117,110,101,32,105,110,116,99,111,100,101,32,112,114,111,103,114,97,109,10,231,350,1278,139,664,182,40,377,157,886,184,138,727,661,904,24,77,349,608,1346,963,12,759,112,129,818,1046,600,43,523,709,1002,2,202,212,11,264,0,505,956,163,560,128,299,0,229,4,33,1402,268,418,1435,151,786,727,100,248,57,763,311,206,67,997,379,378,332,0,23,143,93,389,815,11,66,873,1414,7,7,681,140,288,390,434,314,215,360,3,317,463,294,0,33,801,1417,54,782,937,94,102,95,15,177,649,45,107,695,100,49,193,636,263,177,932,345,706,99,28,211,449,442,117,7,467,101,732,947,818,346,87,78,285,236,707,912,1652,294,333,706,758,1621,782,246,546,663,699,177,94,221,746,66,170,514,364,751,1486,157,54,38,1469,0,79,83,1060,422,252,27,1332,386,523,41,934,988,278,409,438,61,1047,260,300,240,0,496,1392,181,268,413,544,1169,662,566,4,988,267,1259,250,346,319,235,172,728,1621,505,1490,17,104,711,714,1139,497,603,759,393,1184,60,369,1326,333,45,51,118,1171,29,1560,252,139,481,1160,177,555,150,115,129,237,1672,613,1311,999,217,20,936,323,116,60,198,644,718,69,594,1142,607,854,878,926,515,29,2,740,1281,74,1406,47,88,249,1416,1263,943,1477,39,123,1919,37,167,227,478,405,421,316,335,1375,359,498,173,507,456,40,226,160,927,229,848,6,1174,1107,710,13,480,1249,817,85,80,128,12,48,243,576,199,208,338,1521,1167,282,690,16,362,791,25,435,495,1217,1215,387,36,1620,166,1586,345,698,541,590,277,328,85,862,751,1273,950,817,77,749,198,156,212,404,6,197,425,582,453,59,45,1059,1058,389,178,547,847,670,559,81,1180,220,1338,216,1528,629,601,802,903,207,352,228,29,761,477,161,268,228,647,80,110,402,470,714,439,511,13,70,277,746,492,657,1215,146,201,63,84,1158,1615,513,1182,83,73,60,22,221,888,344,27,205,1344,325,1362,102,1396,1117,426,80,497,458,11,218,165,221,649,524,264,251,617,825,172,1120,931,520,112,1286,818,1464,11,1,83,184,320,152,730,744,409,604,73,1205,411,732,1078,775,334,130,202,716,368,734,794,723,1140,367,222,435,596,566,719,1046,1428,797,470,124,380,1833,180,62,714,1112,772,26,89,445,9,147,76,764,267,1400,6,275,69,292,143,522,376,797,73,136,688,30,417,1835,47,54,19,32,565,85,320,426,771,66,1656,740,75,10,284,23,14,65,719,1719,874,426,599,314,445,796,994,467,49,0,1141,248,957,50,1024,427,696,533,1284,811,89,17,597,463,1501,13,199,701,53,318,7,628,608,147,291,22,518,191,1243,333,88,12,138,363,262,753,467,456,74,1047,15,339,234,612,452,424,340,481,13,4,303,30,908,1069,1018,1584,426,192,304,337,326,1087,406,132,449,1142,279,307,315,1445,113,49,705,120,187,4,798,960,431,214,1051,848,54,845,64,83,1059,813,1390,1008,237,469,156,61,635,1074,1621,523,24,140,141,715,1124,402,400,204,18,452,1107,453,377,467,241,340,35,320,799,680,5,123,43,1614,1774,549,651,163,700,776,65,336,145,426,150,1049,113,1346,434,45,521,729,55,1448,85,1133,1421,375,1398,319,206,606,68,1597,716,1507,963,141,95,72,33,1242,251,448,1337,1132,83,1779,284,58,625,253,1247,344,47,1194,1047,190,538,103,322,652,44,422,53,31,345,1346,27,768,1006,179,447,1318,199,92,364,141,121,276,284,847,462,700,780,360,843,1430,185,69,635,292,413,43,71,240,15,787,379,1353,173,305,227,118,844,632,471,523,1139,8,811,355,811,223,37,267,438,1011,58,39,64,422,167,844,165,80,618,1115,194,547,47,99,639,171,43,246,104,1429,510,127,125,1035,290,839,1060,26,160,31,570,623,80,1246,645,1396,99,543,159,525,211,446,209,885,512,1483,479,716,417,268,583,1467,573,553,95,729,1589,207,67,224,243,426,283,398,612,596,248,282,180,94,405,148,429,37,116,582,32,253,282,832,94,154,338,75,404,651,365,1436,60,266,1163,982,69,958,751,1693,850,1257,1294,429,120,133,741,564,328,315,1268,98,20,14,114,478,20,344,631,1296,24,1611,487,659,355,1336,20,1197,515,13,1165,1007,1403,1473,126,461,431,15,136,730,449,1109,1146,1210,944,158,742,1586,380,1051,41,1250,915,1417,681,642,70,1789,54,161,1568,676,113,287,338,127,1168,615,421,215".split(",")]
data.sort()
print(data)
r = sys.maxsize
print("---")
for h in range(data[0], data[len(data)-1] + 1):
    c = 0
    for d in data:
        s = 0
        for i in range(1, abs(d - h) + 1):
            s += i
        c += s
    if c < r:
        r = c
        print("H="+str(h)+", R="+str(r)+".")
#==
98231647

###
# 8A
###
import re, sys
from functools import reduce
data = "[ecfdbg decfba aegd fdcag fagecd gd gcafb efdac cbgeafd dfg | bgacf afdebc fceda cabfg] [cfdabeg cda bcgad bedfac aefbgd bfgcad dfbga egabc dgfc cd | gdbefac fgabcd dcbefag aedgfb] [aedbfgc gcaf ebgfca bca edgcfb adbge gebac fbegc ac afdcbe | ceafbg acb egbad gfaebc] [gaeb cafdbg aedfc ecfgdb ab cdaefgb cgbdae bdecg cba eacdb | gfacdeb gabdec begcd adbce] [fcbgea fbedg bc cbefg befgcda cfgdab gbc efdgca fecag aceb | faecg cb cb fecbga] [fdebcg bag gdefa ceadgb fcab ebagfc ab fbegc fcaedbg fbeag | cfegb bga edfga fgbec] [fg fcagb dfgceba edgacb fagd gfb dcgba agcfdb gecfbd ceafb | facgb fbdcge gf gfabc] [eabfd dfb gbcfad ebdag fagbce gefabdc edcf aecfb cbdafe df | egbcdfa afdebcg aecfbd acefb] [fbaec bfegad bga deacbg gb fbdg acgdef deagf fgabe gabecdf | fgdb gefba gcdafe bg] [bfdea agfbc gbd faecdbg gd efgd cdgeab efadbg faebcd fabdg | cdbgea fged cfabed bgd] [gfedac cgaef gab ceba ba afcdgb gdefbac fegbd bafeg abcgfe | gcbadf egafb ebafg ab] [bgda agfcdbe agfde faegb baedgf fcdaeg fdbeac ba bcegf bfa | bcefg eagdf ab bacefd] [dfgbac fdcaeb cbgeda bfdea dcabf ebadcfg gfbea dbe fecd ed | ebd cdfe bgeaf cdbfea] [efdba edb eagbcd bacef bd bcfd becfagd begcaf cbaefd aefdg | fdage edbgac cgaebd bed] [gfecbd gbadf fabged gbf cbdage fagcd feab edgcbaf fb aedbg | agdcf bgfda afdgc afdgb] [gfaedc caefb badcfge dgfe acdgbf eag eg fgacd gecfa ecbdag | acdbgf cbegad cgdaf eag] [gfebda fgacd dfbag bg geab gcbdeaf eacbdf cedbgf fbg abfed | aedfb gb eafdb dbafe] [ebadfc efdbga bega fdgcae dbgaefc edfab fag ag dagbf cfgbd | efacgd dbefag fadebg bgfad] [bf fbd cgbdaf dcfbae fgbcd gcbadef gafcde bfag cebgd dcafg | afbedc gcdeb fbgadc dbf] [gfecab fageb cgb acgeb gdfeab ecbafdg gfca aecbd gc edcgbf | afcg cedba aecdb cgeba] [cdge abfdge cgfeadb bdc gbacd cd cdaebf bgeda cgdaeb acfgb | baecdg fcbag dfeagb gcde] [efabdgc ecafg dacgbf ecgfd dfe gbfdec ed bedc cfdgb gedafb | egcaf cfgae efcgd de] [bfagdc dbagef gbedcf afdeb ab edgfb gdebfac fdeca baf eagb | bfa bgadfc adcef ab] [cfdbae dgefc fcaeg geafdc dfag fd cegbd daefbgc cfd cefbag | efgcd cgdfe cefdg cdf] [cbged feabc fdgb egf ecfdbg dfgcea gabfdce ebcdag bgefc fg | fbgec bgdf efgcbda cbedg] [ebcdfa ef cfe cadbfge becfd dgbeac dafe gbdfc cefgba ceabd | bfcaeg gfedcab acbfge fe] [fbdage bf acdgb cabf gcfed gdcfbea fgbdc fbd fcbadg bgedca | bcadeg bf facbdeg gdabef] [gfacdbe fga gbdaf gadbc dfeagc fg bcgf eacgbd acdgfb debfa | gdcab agcbd dafbecg gfa] [gadbcf badfe bae cfaed abfdg adfecbg eb bedgaf ecfagb egdb | bdaef egfdcab eb be] [dbgecaf gacd dfbac dbaefg dba bfgced cafbdg cbfgd faecb ad | degbcf baegdf gaedbf dfegbc] [afgcd dabgf gedfba agc bdfgac gdefc bcaf cfeadgb ac ecdbga | gfadbec fgcda edgbac fbagd] [acbegfd cgeb dagbef gbaed caebdg gc dafgec adcbg cdbfa gdc | bdaeg bdfac bdfac bcgad] [gfab agfbde fa edbgf cbedfa decga cdagefb degbfc egfda afd | daf fa afd efacbd] [caegdbf daefg fbgac be fgaeb cbea bge cdfagb dgecfb abecfg | gebaf aceb gfdecb befga] [efcgda bd efgdcab afbec bgcd fdagc dgabef dab dafbc cfdagb | dba dcgb ecbdfga abfcd] [abdge fd fda fecd bfcage fecdba fdgbcea afbde acdbfg cfbea | fedc fced adebf fbacde] [acfdbe egcadb gfbacd acfbd bagefcd bgfa cefgd gac cdagf ag | ag bcadeg dgcafb cefdg] [eabdfc fcaeg fecad bcfda dcfbge ebda de ced fdacbg dfbcega | gcebfda gdecfba dbgfec defca] [bfc gdfceb cf eafgbd edcab ebcfa gfeacb acgf adcbgef fabge | bafgecd fgabe aegbcf badec] [gfbc gaced fg bfcda fgd fcgad dgefbac bcafde dgcfab edgfba | bcgf bdceaf dbfaec bdacf] [acbdgf dfcgb dcfeg egbd aedfc fcebag ge gef cfegdba fgbdce | gcbfea fceda dcfgb dfgbc] [agcfd fga fecda gadebf dbgcfe fcbdga dcfgb ga gbac cbfgead | fdeca gbcdf cfdgb afg] [eba ebdc gbefda dcbegaf fbaced afgec be dcfba ebacf dfcagb | eb eab bea be] [bfcge bfead edgfacb edcfag abegfd becdf dacb cd cde bfdcea | adefgc cdab fbead dcba] [bacegd gafcbe begfa bcfad ed gedf ebgfda bdefa ead fegdbac | geafb fedba dbcage egdf] [df fbgdc fcd bfgce abfd cdfgba cgefad cgbad ecadgb egbfacd | bcdgaf cedfga dbgafc dgfbc] [dfabge bcfdg egfbca bdaefcg decbfg ebfgd fgdca cb cbde cbg | beadcgf dgacf adfgc bc] [fgda dafecgb egdbf gef dbgec agebcf gf edgafb fcaedb bafde | fg fecdab bdefg bgfde] [abfgecd eabgf fcdabe gbdafe acebg dfecgb gf gfb fgad dafeb | efdacb efadcgb dagf dfabe] [ceafbg dfcabe gcfea gbac fgead gc cbdgef egc aecfgbd cefba | badecf badefgc bfaec cbeaf] [cadfb caefbd cbfega fdbga cad dc edbc aefbc egbacfd dfgeca | cefdab cdfage bacdf dbafc] [gfcb cf ecafdg fcbed dfbagce fbgeda gdfbec cef eacbd ebdfg | gbdaef caedfg cf gbdefc] [gd cgd ebdafgc cfbega gcbfde bcfdg badfc bgaced bcefg gedf | gfed fcbgd cdgfbe cfbeg] [bfga dabge befacd agbdce fb aegfbd fcged dbegf ebf ebgdcaf | bagf ecfdg fbe bedagc] [beac ea ade gefcd ecgbad cbagd badgcfe ebfgad acgde gcfdab | ea gceadb gcbad cbdga] [cadfbg bcgafed cbedf afeg abegdc adf gedca efacd acdgfe fa | daecg fdecga edafc adbgce] [egd ed egacd cgabfed efcd degfca dagbfc dcagf bgfdea abecg | dge egcad ged cgdfa] [cgdeaf fcbdeg fgc dgcea cadgbe abdcfeg gf cafbe gadf cfega | aecgfd bfaec gf dceabg] [caegd cbfgae dafg egd gd ecafg gfabdec cafdge bacde bdfecg | gedfcb edcagfb cdega becgfd] [badgfe ed dcge fgdceb cebfd cbfedga dabcf efd ecgafb cgbef | dgec dfe ecbgfa cebgaf] [dgabcef bcd cfeadb degfca bgace gcebd cegfd gbdf bd begfdc | acbeg dbc gdfb gfdb] [edafgb bagf acedb dbg fcgdabe bcdgfe gb bgead dfaecg faged | gafb dgafeb gbaf fadegb] [bc abcegf bfcgd gdcbef dcbe gcb cafegbd aegdbf dfagc dbegf | cbg cbg cfedgba dgcfabe] [be ecgbf cbafg ebg bagedc fbae degfabc fgcdab dgfce cabfeg | gfcde dgfbca dcabgf bacegd] [af dbacge efa abegfdc gfdce begcfa aecfg afbced fgba ecabg | ecadfb gfeca efa gefdc] [acbedg edfacbg begd cdfabe dagcb eacdb gfeabc bg gba dfgac | cegbaf ecfdba cgbda dfebca] [dcbgaef bca abed cbgad gdaec fecbag edgbca geadfc ab cdgfb | beagcd dgbca eabd ceabgd] [cgabe gfcbe cfegba fdbgc fe fdgebca aedcbg gfea bfdcea fbe | feb gaef badgec ecgabf] [afecdg dfbc cd dcg aegcb baedgf becgd becfdg eacgbdf ebdgf | gbedf edgbf bcdeg gfadbe] [gfdba adbefc ebcdfag bcgaf bfdaeg dg adbfe egbacd bgd dfge | gbd bgd bcgfa fbgad] [dfaegb fe bcgde face afgbdc acgebdf agfcb cgbef fcgbea gfe | acef afedgb bgdfcea fgedab] [abdcef gdfea cbaef gaefb cagebf agfdbec agdbfc ecgb fbg bg | aebfc egcb acfgbe gebc] [bcf gbadec bf bgaf fcdea cgbda gebdfc dgefcab fcabd bdagcf | edacf bf cfb gadcb] [cdafgb bgdf gacefd cdb bd ecfadbg cdafg cdebag bfadc ecafb | bcefa cfdba agdfc fabdc] [egb dgbf bgdeca febag fbadge ebadf aecfg gb geacfdb fbacde | fdbg bg caegf egfab] [ac eagfbdc bgacf cbdgae gabdf acdf gdfaeb acg dbgafc gbfce | gdbeaf agbcf dcbagf fgadeb] [ef eagf bfegcd gbaefd fbe eafbd dagfb abced agcfbd abcefdg | ef ef ecdgfab deafb] [fdgbc efbgd aedbg dfce bcagdf fe fegcab cdgabef efg cgdfbe | efgcdb efg agcfeb dgfabc] [fe dbefgac baegc eagfc ebgf acdgf aedbfc bgafce cef bcgdea | agbdce aecbfg cdgaf ef] [fbgcd bdf dfbega dfcga abfdcg db dabc cfebg feadgc ecgbdaf | fcbeg gcdfb cgbdf acfdg] [bac cdbeagf abfd bcfea edcfba abdcge edacf gcbfe gcdefa ba | cegfb cafde ba fegdcba] [gcabfd acdg cg gfdbcae ecbgfa cbg bfegd gdcfb cedafb fadcb | cgfbd cfgdb fdegb cg] [fcdaegb gdefcb dgfacb dcgea eb dgcbf afcegb bgced bdef bec | ecdag eb befd dabcfge] [defcb eabcf bca abfeg ac cafbge gfac dbaecg fcbegad bagedf | bfgae cfga ecabf aegbcf] [gdcfea adgcf cbged bgadfc gbf gfdbc cfegdba bcfa bf dgaefb | fgadc bfg fb bf] [bdgcaef adg egbca cdabg eadbcg eadc cgdfb efagbd ad ebfagc | da dace dga gedfab] [cade afgecd fgedc cbaegf efbgd gdfcabe ce fec cadgfb dcgaf | ce adefgc cdea fce] [efgcba ged gcdbea acgeb decag cdgaf egbcafd bdae fgcbed de | adeb edg cgadf agdec] [agfce af febgc ebgadc cadeg dafg faegcd bceadf bfaecgd efa | egbcf fbgec acedg af] [cbgdae debcfa becadfg agecb gcde cfgba ce begda bec fdaebg | bec eadgb eadbg badefgc] [bagedf ecf ec dbefc cbedfa edca dfbcg edbfa eabgfc aefgcdb | fec dafebc cfe aefdb] [aef bface dabefg ebfdgac caeg bgfac fcegba fcbed ae cfgbad | efcba baefc afbcg gbcfa] [dfeca fdagcb feagc adcbef fg gefd cabge fgdbace cegadf cgf | fg decfab cfdbga baecg] [gbaefd agedbcf cagbe fb cgbeaf baefc bfgc bgeacd efb dcfae | gcbaed fb bgfcae bcfg] [cegf bcedg bgacdef gbedf fg ebadf ebgdcf dgcfba debgac bfg | bdfgca bgf fgdbce becfadg] [decafgb acgbd fegdab cefag dfcga gdf fd aecfgb dfecga cefd | gcebfa fgacbe fgbdae fcde] [faebc acb bdfgca afgedcb ab daeb fcbge afcebd feacd cafedg | fbgdca ab afedgc ceafbd] [gfeb ebgcdfa dfgca abfdg agebd bf abf bceafd dabgce dbfgae | fgeb gadbf gcafd bf] [ecbdfg gecdfa efcadgb ebdac deabf fbga bf dbf efagbd dfgae | adfbe cfdage efdcga gfab] [fg cedbgaf feacbd dafgeb fag gfecba acgde febac cfega fcgb | decbgfa fg ecgad afdbgce] [cfbgde aegcdf daefbc dgceb fcged gafdecb cbfg bc ceb gebad | dafecbg eagdb bec begdc] [cdefga fbgcade fgdca cd bafdec adc dbgeaf cafgb efgda cegd | afcgb ecdg bcfag caedfg] [agfbc af deagfbc fecbg gfa fcegbd cfae bgafec edagbf bcadg | agf ecfa becfg af] [bdgf afceg adcfeb egbaf afgbde afb fb cegbfda daebg adgbec | fba ceadgbf bf fb] [efgb eg aecbd ecbdg daecgf dcgfb fbagdc egfadcb gce ecbgdf | afbegcd fegdac cebad bgafdc] [acgbd eb dbace bdafgc fabdge bceg gecdba edcaf aeb bagcdef | fdgabc fegadb dgbcfea egabfd] [cadfgb acefdg fcb fbea fb ebdfca ebcdf degcb dfaec cbdefga | aefcdbg cdegaf gdbec dcfae] [fcdab edc cfeb gdfcae dcaeb ec gdcbaf fdcabe debga efbgadc | fcbe gbaed fcaedb acedgf] [gb gefca acbfge bdgaecf bfcag bdfca abg aedfgb gebc agfecd | cgafb ebcg aecfg efgbac] [dgabcef fbdgea fb cdbf cebfg bdaegc dgceb egcdfb bfg acgef | cbgde faegc befgdca cbdf] [cfaebdg fg fgcead agedb fge ebcdf gebdf dfeagb dbgace fgab | gfba eagdfcb dcabeg cegafd] [fbe egcba bgefdca bgdafe afdgb fdbgac dgcbfe fbega defa fe | ebf egafb fbgdac egafb] [gdc acfdeg geabc dbfg dabcfe dbeafcg dg bedcf edcgb efcbdg | agcefd cbdfe dg bcedf] [bafgcd febdgca abgcf bcgea be edgac aeb cbef afebgd ecgbfa | bea eb ecfbag abfcg] [cdae cbd gacbe fcbdge cefbag bagcde gcabd bdafg dc fdgebca | cegdfb gbeacd cd cabdge] [dac dfgae fcdabg agbc dcfbg gfedbc fadcg bfaegcd ca eadbcf | cfabged ac cbag dfceab] [egbdcf bdeagfc aegcb bafec fdceb edgafc caebfd aef fbad af | efa adfcbge dfba ebgac] [ebadg fcaeb dc acdg becgfd adecgbf dbc dbeafg dbaec bedagc | cdb bdc dc aecbd] [cfaegbd agbdce edca badgf edgfbc ebagd ed gde aebfgc ebcag | cbeag edca gdbea fbedgc] [fgb dfagceb cabgdf gf afge ecbaf deabcf cbdeg bgefc gfceba | bgecd gf bacef fg] [abd fgcdaeb gfeabc gdfacb fcbea faebcd dcbeg badce ad dafe | adecb gfaebc fdcbga aecdb] [fcgdeab eabgf feagd dge dg cdaefb acedbg cdfg gcaedf efadc | cfade cbeadg bgfea dg] [fegcb fcedag badgce fcbdgea afg gafeb af dbgefa degba fadb | fbegc fabge af dcgabe] [abcdfg dcbfea bagd cegfb bd dbf cgafde edgcbfa fgdca bcdfg | fdabce gbcfd cbefda ecabdf] [afgbd fbgde dcfageb ag gba gfdcab eadgcb cfag daebfc cdbfa | ga ag bdaefc ga] [egf ecabfd fg ecdfb cfgb cbegadf dgbfae begcfd agcde cgdfe | gbdefa fedgc cafedb cfdge] [bafcdge dgbace cgbad cdafe bedcfg be abge cebad dcfabg bed | dbe gabfced cgbedf cbadg] [becagf fdec debafc afedb adbgc bgdfea dabcf cf cabegfd afc | bagdc decf fca dfbae] [dcagb gfcade cgdebf fdbeag gdfeabc efdcg ecfb deb egbcd eb | eb edagbf ebfc eagdcf] [ebcdaf fgdc gbeac dgfae efadbg cd gcefda dgace fbgedac cda | aegdc dfabge gcade daceg] [fgdcb adceb fcgeabd acedbg af fba aebgdf efac dcabfe adbcf | cdbaf cgeadb bdcae bfgaed] [fcb fc fcdgb dabfg eabcfdg cbged cefg begdca gcdbfe efdacb | ecfg fabgcde gdecbaf bacged] [gfdabc ad bdfgea fegbdac gbaecf bfega adg adbe afged egdcf | dcfgab bgcefa gad gafcbd] [bgdcfea afb gabfcd adbfeg efdba bgdfe dfgbce eafdc bage ab | ab dgefb baf bgaedcf] [geabd adecfgb cg ebcdfa agfbdc fdcg dabcf dcbag faebcg cbg | dagbe fgdbeca cbagdfe fcbeda] [bdfa dafbge fgedb bfceg bdg afdebgc bd bdaecg defcga gfdea | bagfdce dcgafe fegbc dbegca] [aedcgb fb gdbaf dgabe acdfg fabgde fadecgb gbf edfb facegb | agdcf badeg fb fabcge] [dfbce gafed ba eagb gfdbca aefdb fecdag fagbedc abf egadfb | eafdb edfcbag dcfbe ba] [afdec fcegda edgabc bgdfc faebdc ba bac dcfebag fadbc fbae | deafc acb fbgaecd cfdea] [gecd dgf eabdf gd gfdeb fgcadb gcbfae cefbg cedfbg cfeabdg | gd edfba fgbce fbgec] [adfge bcgfde baecg dcfgaeb bafdge gdeac dagcef dc cdg acdf | cgd dgcae gcead cd] [efgac agbfedc aecbfd agbfde dcbg fdbag gacdfb bc fgbac fbc | bc afdegb bgdc edbafg] [be cbfgad acegdb agefd dabgc cebfgad gbce bdega dfbace bed | bagde eb egcb edfbac] [gf fag afgbe ecbaf geadb eabgdf egdf dagbfc ecagdb cbgdeaf | cbefa fg bdega gfacbed] [bag defba gcfdae cgbd gb eabgfc gcfabd dfagb gcdfa ecbgfda | begacf agb cgfade fcdga] [adgfcbe egd fgadeb cgbdae acdgb cgedb deca de efcbg acbdgf | cfbdag dcgba geabdf eadc] [cagdebf dgebcf edc abecfd egfadb fabed ec gadbc efca dabce | dec fbadec debac edc] [fcedg dfgbae eg deg egcb fgcebd efacd gfdcb gbfecda gdafbc | efacd ge cfgabde fagecdb] [dbag aefcbd gbc gcdbf bdcfa bg dfabcg ebadgcf cfgeba dgecf | bfaced gedcf dbag cgbdaf] [cdgfbea gd bdag gebca bdcgfe dgc fcagbe gabedc afcde cdaeg | abgcde ebcga dagb bgcefa] [cedgbfa ecabgd cdafeb bafcg cegdbf cae gdae gabce ae edcgb | aec cageb ecdgfb egda] [eacgbf afbdg gdecaf gafbcde gfc baefc bcge fcabg fdcbea cg | agfdb cgfba bgafc eacgdf] [fgebd fed bfea cbdeg decfga fe cfdgba defbgac dfgba afdbeg | fgdba abegdfc bcadgf fbegd] [adbfcg fagdbe bagec dc fbaedcg bdfag gbdca fcgedb dcfa cgd | fcad bfdgae dgc eagbc] [fgbaecd fgecd cafeg feacbg fdgcb fgaecd acdbge ed adfe dge | cfgdb gcedf deaf cfdbg] [gedab afdcbeg decabg bfedcg dgefab ef aedf cfgab gbaef efb | abcgf cabgf feagdcb cdbaefg] [fdb ebdgfc bd adefgcb efgad gbcd dfbge afcgeb fecgb dbeacf | bfd cgfdeba cafdeb gedfa] [abgde bdefa fagdbe fbadceg dgecab dfe ef edfgca bfdac fbge | fegb cagdeb ecdgab bdagefc] [febad bacged fge cdbeg cfebdag fgdc gf debcgf bdefg cfebga | fg egf beafd efg] [agdcbf bdefcga cbgefd dcagb gbedac faedc gfc bfag gfcad gf | bgfa dbagc bfgdca bcgad] [bdce gafbed gaecf bcefdag gbc dacbeg fcbgad egdab cb cegba | eadbgc cb ebadgf debc] [ac afgceb eagbf befcagd abcg degcf aefbdg ceagf edbacf acf | abecgf bgac gacb ceadbf] [abcg fcaeb gfdcabe ab befdc cfage gdbfea gecdaf efcgba bfa | bgac bcga cagb efgbda] [fbdeg gb fcdeb dfecbg eafgdbc edgfa eagbdc baedfc cbfg beg | adbgce dfcaeb bgfc abcged] [afg afdbec cbdgaf afcgedb bedgf cdagef ga afcdb gbca gfbda | cfagdb edcafg cbfgda bgfed] [edgafcb fdeab dgabcf cbgf gdfeac dgfab gdeacb acgbd gfa gf | gaf bcgf ecbagd agf] [dcbfa gfbace ebfca efcg bgfeadc abgce gbafde ef beadcg fbe | egcf fabdc adebgf bdcage] [gc cfdbe fgcebd bcgef ceg fdagceb ecadbg fgdc fageb bedcfa | adgcbe aefgdcb gabfe gc] [fgead bcdafg ba bcae edafb bcefad dbcfe cafbgde gbcdef adb | dcfeb gecdfb caeb bacdfe] [gfeab abc bc ecbf gdebaf gebac gdcea gecdfba acdfbg fbgcae | cbdagf gbcae bc edgbaf] [aecgf acbf cgadef fecbg bc ebc dcegba befdg aebgcf afdebgc | ecb bcgfe bgedf abcf] [fg facg efcagd eadfg cebfda feg daegb bdfcge afced cfeadgb | acdfe fgeda fg cdbegf] [gefda fed edfbgc fgeab cfad cdeag fd cebgad dcefabg fagdce | faegdc eafdg fd cgbfdea] [ebfad cf befca gabedc fac cabeg dcaefg abfecg fbacged gcbf | bfade fcbg fc cgbf] [aegbf cbdfega adbfg ef cebdgf dfcbga gebca fadgbe afde gfe | fdae afcbgd bgcedaf gef] [cdgab cg edgbac gbedfa gebcdaf dcebfg gcd degba aceg dacfb | gdc cgdba cdg gbadc] [daebfg fcebgad db gacbf feacdg gafdb eafdbc dgaef dfb bedg | cefdbag gedfca gafdeb befcda] [ecfd fcdgba cebgf fge bgafed febdcg cbfegad cabeg fe gfdbc | ecgdfb edfc gebdaf fecd] [fac gbeaf bcdga adgbcef febcda cfgba gefbda bagcfe cfge fc | gcfe gbcaf acfbeg acdgb] [afegdcb fdgba bfgacd fdcg fd cbfga adf ebcagf dcfabe gbdae | df bcaefd cfagb df] [cdbgef bgef ge ged badec agfdcb adgecf cgdeb cbgdf fdbceag | dcfgb gcebd egbf dcegb] [dfbea gb cfgea bag fgbc debcga acdbgef afcgbe gfeba cfdaeg | beafd bag cbgf gba] [fdgcab cd ebdaf baecdgf cda bcgaf cfebga acebgd cbdaf cfgd | aegcfb cdgf cdgf afegbdc] [fcbga cbeagf dcabg da dfabcg bdaf begcd dca fdagce bcgfdae | acgbd dbceg acd cfbga] [degacbf cf dcgfba adegbf efgab gfce acfeb dbeca caf gcebaf | bacfe abfecg ebafc debac] [bcaefd gbce dcegfb gcbadf dgfaecb fbdce dgcfe cg agfed fcg | dbgfec gc acdgfb efbcd] [cdfag dgebacf bdfagc fba acdgef fcdab bfdg baedc gbfaec fb | cedbafg fb dgfeac cadbf] [bcdgf eafcbgd bd adfb dcabeg gebfac gcfba gfdacb fdgce bgd | cfbga fgcab db fcegd] [cdgafe deg bedfc dfgb cgdbe dg dcefba efdgbc cagbefd cegab | bgdf abfdec egd gedbfc] [bg febdca edgcb cdeab gbc edgbca gdab beagcf cdegf debacfg | bcaedf dgcef badg fecadbg] [dbca cgaedb gcfbe cea fadbeg gabce ca edcafg degab abfedgc | fdebag beacg abcd adcegb] [gcdfe adbfgec cbafge dgbaf ebf gfbced eb adcgfe becd fgebd | ecgfba gcbfde dbec cdafge] [dbgeafc dacbg badfge abfce ed eda dcfe decba dcfeab gfbeca | febcda defc beacf fdgabe] [efcd bfcadge fcdba egabf bfdcag dcefba deagbc fabed ed edb | gbeacd fdeab ebcfad fageb] [dcgf fegdab bcaeg dcegaf dga gd dcfbea fcdea aedcg bdefgca | cbegdfa eabcfd adfce cbefda] [bf edfbgc cegbf bcadefg ebf acbfde gcedf feadgc gbcae gfbd | feb dfgb egbcdfa dfegc] [efgba eacd efadcg dcgefb gacdf dbcfgae efd bgcdaf edfga ed | cfbgda dgcfa gcfead eadfg] [afgdc fbg cdgaef fagbdc bgcefa cdbf bgdaf bdaeg fb dgabcfe | dagfc cefagb egcabf fcbd] [cadgfe acbed cfabgde fdbcge cfga fad fdeabg fa dcaef dcfge | fad bafgecd cfegad adbfcge] [agdefc cfad bdgecfa gadfe aefgc ad ceadgb gbafce bfedg agd | dag ad fcage cgbafe]"
data = [d.replace('[', "").replace(']', "") for d in data.split("] [")]; print(data)
#--
print(len([f for f in reduce(lambda a, b: a + b, [e.split(" ") for e in [d.split(" | ")[1] for d in data]]) if len(f) == 2 or len(f) == 4 or len(f) == 3 or len(f) == 7]))
#==
303

###
# 8B
###
from copy import deepcopy as dc
data = "[ecfdbg decfba aegd fdcag fagecd gd gcafb efdac cbgeafd dfg | bgacf afdebc fceda cabfg] [cfdabeg cda bcgad bedfac aefbgd bfgcad dfbga egabc dgfc cd | gdbefac fgabcd dcbefag aedgfb] [aedbfgc gcaf ebgfca bca edgcfb adbge gebac fbegc ac afdcbe | ceafbg acb egbad gfaebc] [gaeb cafdbg aedfc ecfgdb ab cdaefgb cgbdae bdecg cba eacdb | gfacdeb gabdec begcd adbce] [fcbgea fbedg bc cbefg befgcda cfgdab gbc efdgca fecag aceb | faecg cb cb fecbga] [fdebcg bag gdefa ceadgb fcab ebagfc ab fbegc fcaedbg fbeag | cfegb bga edfga fgbec] [fg fcagb dfgceba edgacb fagd gfb dcgba agcfdb gecfbd ceafb | facgb fbdcge gf gfabc] [eabfd dfb gbcfad ebdag fagbce gefabdc edcf aecfb cbdafe df | egbcdfa afdebcg aecfbd acefb] [fbaec bfegad bga deacbg gb fbdg acgdef deagf fgabe gabecdf | fgdb gefba gcdafe bg] [bfdea agfbc gbd faecdbg gd efgd cdgeab efadbg faebcd fabdg | cdbgea fged cfabed bgd] [gfedac cgaef gab ceba ba afcdgb gdefbac fegbd bafeg abcgfe | gcbadf egafb ebafg ab] [bgda agfcdbe agfde faegb baedgf fcdaeg fdbeac ba bcegf bfa | bcefg eagdf ab bacefd] [dfgbac fdcaeb cbgeda bfdea dcabf ebadcfg gfbea dbe fecd ed | ebd cdfe bgeaf cdbfea] [efdba edb eagbcd bacef bd bcfd becfagd begcaf cbaefd aefdg | fdage edbgac cgaebd bed] [gfecbd gbadf fabged gbf cbdage fagcd feab edgcbaf fb aedbg | agdcf bgfda afdgc afdgb] [gfaedc caefb badcfge dgfe acdgbf eag eg fgacd gecfa ecbdag | acdbgf cbegad cgdaf eag] [gfebda fgacd dfbag bg geab gcbdeaf eacbdf cedbgf fbg abfed | aedfb gb eafdb dbafe] [ebadfc efdbga bega fdgcae dbgaefc edfab fag ag dagbf cfgbd | efacgd dbefag fadebg bgfad] [bf fbd cgbdaf dcfbae fgbcd gcbadef gafcde bfag cebgd dcafg | afbedc gcdeb fbgadc dbf] [gfecab fageb cgb acgeb gdfeab ecbafdg gfca aecbd gc edcgbf | afcg cedba aecdb cgeba] [cdge abfdge cgfeadb bdc gbacd cd cdaebf bgeda cgdaeb acfgb | baecdg fcbag dfeagb gcde] [efabdgc ecafg dacgbf ecgfd dfe gbfdec ed bedc cfdgb gedafb | egcaf cfgae efcgd de] [bfagdc dbagef gbedcf afdeb ab edgfb gdebfac fdeca baf eagb | bfa bgadfc adcef ab] [cfdbae dgefc fcaeg geafdc dfag fd cegbd daefbgc cfd cefbag | efgcd cgdfe cefdg cdf] [cbged feabc fdgb egf ecfdbg dfgcea gabfdce ebcdag bgefc fg | fbgec bgdf efgcbda cbedg] [ebcdfa ef cfe cadbfge becfd dgbeac dafe gbdfc cefgba ceabd | bfcaeg gfedcab acbfge fe] [fbdage bf acdgb cabf gcfed gdcfbea fgbdc fbd fcbadg bgedca | bcadeg bf facbdeg gdabef] [gfacdbe fga gbdaf gadbc dfeagc fg bcgf eacgbd acdgfb debfa | gdcab agcbd dafbecg gfa] [gadbcf badfe bae cfaed abfdg adfecbg eb bedgaf ecfagb egdb | bdaef egfdcab eb be] [dbgecaf gacd dfbac dbaefg dba bfgced cafbdg cbfgd faecb ad | degbcf baegdf gaedbf dfegbc] [afgcd dabgf gedfba agc bdfgac gdefc bcaf cfeadgb ac ecdbga | gfadbec fgcda edgbac fbagd] [acbegfd cgeb dagbef gbaed caebdg gc dafgec adcbg cdbfa gdc | bdaeg bdfac bdfac bcgad] [gfab agfbde fa edbgf cbedfa decga cdagefb degbfc egfda afd | daf fa afd efacbd] [caegdbf daefg fbgac be fgaeb cbea bge cdfagb dgecfb abecfg | gebaf aceb gfdecb befga] [efcgda bd efgdcab afbec bgcd fdagc dgabef dab dafbc cfdagb | dba dcgb ecbdfga abfcd] [abdge fd fda fecd bfcage fecdba fdgbcea afbde acdbfg cfbea | fedc fced adebf fbacde] [acfdbe egcadb gfbacd acfbd bagefcd bgfa cefgd gac cdagf ag | ag bcadeg dgcafb cefdg] [eabdfc fcaeg fecad bcfda dcfbge ebda de ced fdacbg dfbcega | gcebfda gdecfba dbgfec defca] [bfc gdfceb cf eafgbd edcab ebcfa gfeacb acgf adcbgef fabge | bafgecd fgabe aegbcf badec] [gfbc gaced fg bfcda fgd fcgad dgefbac bcafde dgcfab edgfba | bcgf bdceaf dbfaec bdacf] [acbdgf dfcgb dcfeg egbd aedfc fcebag ge gef cfegdba fgbdce | gcbfea fceda dcfgb dfgbc] [agcfd fga fecda gadebf dbgcfe fcbdga dcfgb ga gbac cbfgead | fdeca gbcdf cfdgb afg] [eba ebdc gbefda dcbegaf fbaced afgec be dcfba ebacf dfcagb | eb eab bea be] [bfcge bfead edgfacb edcfag abegfd becdf dacb cd cde bfdcea | adefgc cdab fbead dcba] [bacegd gafcbe begfa bcfad ed gedf ebgfda bdefa ead fegdbac | geafb fedba dbcage egdf] [df fbgdc fcd bfgce abfd cdfgba cgefad cgbad ecadgb egbfacd | bcdgaf cedfga dbgafc dgfbc] [dfabge bcfdg egfbca bdaefcg decbfg ebfgd fgdca cb cbde cbg | beadcgf dgacf adfgc bc] [fgda dafecgb egdbf gef dbgec agebcf gf edgafb fcaedb bafde | fg fecdab bdefg bgfde] [abfgecd eabgf fcdabe gbdafe acebg dfecgb gf gfb fgad dafeb | efdacb efadcgb dagf dfabe] [ceafbg dfcabe gcfea gbac fgead gc cbdgef egc aecfgbd cefba | badecf badefgc bfaec cbeaf] [cadfb caefbd cbfega fdbga cad dc edbc aefbc egbacfd dfgeca | cefdab cdfage bacdf dbafc] [gfcb cf ecafdg fcbed dfbagce fbgeda gdfbec cef eacbd ebdfg | gbdaef caedfg cf gbdefc] [gd cgd ebdafgc cfbega gcbfde bcfdg badfc bgaced bcefg gedf | gfed fcbgd cdgfbe cfbeg] [bfga dabge befacd agbdce fb aegfbd fcged dbegf ebf ebgdcaf | bagf ecfdg fbe bedagc] [beac ea ade gefcd ecgbad cbagd badgcfe ebfgad acgde gcfdab | ea gceadb gcbad cbdga] [cadfbg bcgafed cbedf afeg abegdc adf gedca efacd acdgfe fa | daecg fdecga edafc adbgce] [egd ed egacd cgabfed efcd degfca dagbfc dcagf bgfdea abecg | dge egcad ged cgdfa] [cgdeaf fcbdeg fgc dgcea cadgbe abdcfeg gf cafbe gadf cfega | aecgfd bfaec gf dceabg] [caegd cbfgae dafg egd gd ecafg gfabdec cafdge bacde bdfecg | gedfcb edcagfb cdega becgfd] [badgfe ed dcge fgdceb cebfd cbfedga dabcf efd ecgafb cgbef | dgec dfe ecbgfa cebgaf] [dgabcef bcd cfeadb degfca bgace gcebd cegfd gbdf bd begfdc | acbeg dbc gdfb gfdb] [edafgb bagf acedb dbg fcgdabe bcdgfe gb bgead dfaecg faged | gafb dgafeb gbaf fadegb] [bc abcegf bfcgd gdcbef dcbe gcb cafegbd aegdbf dfagc dbegf | cbg cbg cfedgba dgcfabe] [be ecgbf cbafg ebg bagedc fbae degfabc fgcdab dgfce cabfeg | gfcde dgfbca dcabgf bacegd] [af dbacge efa abegfdc gfdce begcfa aecfg afbced fgba ecabg | ecadfb gfeca efa gefdc] [acbedg edfacbg begd cdfabe dagcb eacdb gfeabc bg gba dfgac | cegbaf ecfdba cgbda dfebca] [dcbgaef bca abed cbgad gdaec fecbag edgbca geadfc ab cdgfb | beagcd dgbca eabd ceabgd] [cgabe gfcbe cfegba fdbgc fe fdgebca aedcbg gfea bfdcea fbe | feb gaef badgec ecgabf] [afecdg dfbc cd dcg aegcb baedgf becgd becfdg eacgbdf ebdgf | gbedf edgbf bcdeg gfadbe] [gfdba adbefc ebcdfag bcgaf bfdaeg dg adbfe egbacd bgd dfge | gbd bgd bcgfa fbgad] [dfaegb fe bcgde face afgbdc acgebdf agfcb cgbef fcgbea gfe | acef afedgb bgdfcea fgedab] [abdcef gdfea cbaef gaefb cagebf agfdbec agdbfc ecgb fbg bg | aebfc egcb acfgbe gebc] [bcf gbadec bf bgaf fcdea cgbda gebdfc dgefcab fcabd bdagcf | edacf bf cfb gadcb] [cdafgb bgdf gacefd cdb bd ecfadbg cdafg cdebag bfadc ecafb | bcefa cfdba agdfc fabdc] [egb dgbf bgdeca febag fbadge ebadf aecfg gb geacfdb fbacde | fdbg bg caegf egfab] [ac eagfbdc bgacf cbdgae gabdf acdf gdfaeb acg dbgafc gbfce | gdbeaf agbcf dcbagf fgadeb] [ef eagf bfegcd gbaefd fbe eafbd dagfb abced agcfbd abcefdg | ef ef ecdgfab deafb] [fdgbc efbgd aedbg dfce bcagdf fe fegcab cdgabef efg cgdfbe | efgcdb efg agcfeb dgfabc] [fe dbefgac baegc eagfc ebgf acdgf aedbfc bgafce cef bcgdea | agbdce aecbfg cdgaf ef] [fbgcd bdf dfbega dfcga abfdcg db dabc cfebg feadgc ecgbdaf | fcbeg gcdfb cgbdf acfdg] [bac cdbeagf abfd bcfea edcfba abdcge edacf gcbfe gcdefa ba | cegfb cafde ba fegdcba] [gcabfd acdg cg gfdbcae ecbgfa cbg bfegd gdcfb cedafb fadcb | cgfbd cfgdb fdegb cg] [fcdaegb gdefcb dgfacb dcgea eb dgcbf afcegb bgced bdef bec | ecdag eb befd dabcfge] [defcb eabcf bca abfeg ac cafbge gfac dbaecg fcbegad bagedf | bfgae cfga ecabf aegbcf] [gdcfea adgcf cbged bgadfc gbf gfdbc cfegdba bcfa bf dgaefb | fgadc bfg fb bf] [bdgcaef adg egbca cdabg eadbcg eadc cgdfb efagbd ad ebfagc | da dace dga gedfab] [cade afgecd fgedc cbaegf efbgd gdfcabe ce fec cadgfb dcgaf | ce adefgc cdea fce] [efgcba ged gcdbea acgeb decag cdgaf egbcafd bdae fgcbed de | adeb edg cgadf agdec] [agfce af febgc ebgadc cadeg dafg faegcd bceadf bfaecgd efa | egbcf fbgec acedg af] [cbgdae debcfa becadfg agecb gcde cfgba ce begda bec fdaebg | bec eadgb eadbg badefgc] [bagedf ecf ec dbefc cbedfa edca dfbcg edbfa eabgfc aefgcdb | fec dafebc cfe aefdb] [aef bface dabefg ebfdgac caeg bgfac fcegba fcbed ae cfgbad | efcba baefc afbcg gbcfa] [dfeca fdagcb feagc adcbef fg gefd cabge fgdbace cegadf cgf | fg decfab cfdbga baecg] [gbaefd agedbcf cagbe fb cgbeaf baefc bfgc bgeacd efb dcfae | gcbaed fb bgfcae bcfg] [cegf bcedg bgacdef gbedf fg ebadf ebgdcf dgcfba debgac bfg | bdfgca bgf fgdbce becfadg] [decafgb acgbd fegdab cefag dfcga gdf fd aecfgb dfecga cefd | gcebfa fgacbe fgbdae fcde] [faebc acb bdfgca afgedcb ab daeb fcbge afcebd feacd cafedg | fbgdca ab afedgc ceafbd] [gfeb ebgcdfa dfgca abfdg agebd bf abf bceafd dabgce dbfgae | fgeb gadbf gcafd bf] [ecbdfg gecdfa efcadgb ebdac deabf fbga bf dbf efagbd dfgae | adfbe cfdage efdcga gfab] [fg cedbgaf feacbd dafgeb fag gfecba acgde febac cfega fcgb | decbgfa fg ecgad afdbgce] [cfbgde aegcdf daefbc dgceb fcged gafdecb cbfg bc ceb gebad | dafecbg eagdb bec begdc] [cdefga fbgcade fgdca cd bafdec adc dbgeaf cafgb efgda cegd | afcgb ecdg bcfag caedfg] [agfbc af deagfbc fecbg gfa fcegbd cfae bgafec edagbf bcadg | agf ecfa becfg af] [bdgf afceg adcfeb egbaf afgbde afb fb cegbfda daebg adgbec | fba ceadgbf bf fb] [efgb eg aecbd ecbdg daecgf dcgfb fbagdc egfadcb gce ecbgdf | afbegcd fegdac cebad bgafdc] [acgbd eb dbace bdafgc fabdge bceg gecdba edcaf aeb bagcdef | fdgabc fegadb dgbcfea egabfd] [cadfgb acefdg fcb fbea fb ebdfca ebcdf degcb dfaec cbdefga | aefcdbg cdegaf gdbec dcfae] [fcdab edc cfeb gdfcae dcaeb ec gdcbaf fdcabe debga efbgadc | fcbe gbaed fcaedb acedgf] [gb gefca acbfge bdgaecf bfcag bdfca abg aedfgb gebc agfecd | cgafb ebcg aecfg efgbac] [dgabcef fbdgea fb cdbf cebfg bdaegc dgceb egcdfb bfg acgef | cbgde faegc befgdca cbdf] [cfaebdg fg fgcead agedb fge ebcdf gebdf dfeagb dbgace fgab | gfba eagdfcb dcabeg cegafd] [fbe egcba bgefdca bgdafe afdgb fdbgac dgcbfe fbega defa fe | ebf egafb fbgdac egafb] [gdc acfdeg geabc dbfg dabcfe dbeafcg dg bedcf edcgb efcbdg | agcefd cbdfe dg bcedf] [bafgcd febdgca abgcf bcgea be edgac aeb cbef afebgd ecgbfa | bea eb ecfbag abfcg] [cdae cbd gacbe fcbdge cefbag bagcde gcabd bdafg dc fdgebca | cegdfb gbeacd cd cabdge] [dac dfgae fcdabg agbc dcfbg gfedbc fadcg bfaegcd ca eadbcf | cfabged ac cbag dfceab] [egbdcf bdeagfc aegcb bafec fdceb edgafc caebfd aef fbad af | efa adfcbge dfba ebgac] [ebadg fcaeb dc acdg becgfd adecgbf dbc dbeafg dbaec bedagc | cdb bdc dc aecbd] [cfaegbd agbdce edca badgf edgfbc ebagd ed gde aebfgc ebcag | cbeag edca gdbea fbedgc] [fgb dfagceb cabgdf gf afge ecbaf deabcf cbdeg bgefc gfceba | bgecd gf bacef fg] [abd fgcdaeb gfeabc gdfacb fcbea faebcd dcbeg badce ad dafe | adecb gfaebc fdcbga aecdb] [fcgdeab eabgf feagd dge dg cdaefb acedbg cdfg gcaedf efadc | cfade cbeadg bgfea dg] [fegcb fcedag badgce fcbdgea afg gafeb af dbgefa degba fadb | fbegc fabge af dcgabe] [abcdfg dcbfea bagd cegfb bd dbf cgafde edgcbfa fgdca bcdfg | fdabce gbcfd cbefda ecabdf] [afgbd fbgde dcfageb ag gba gfdcab eadgcb cfag daebfc cdbfa | ga ag bdaefc ga] [egf ecabfd fg ecdfb cfgb cbegadf dgbfae begcfd agcde cgdfe | gbdefa fedgc cafedb cfdge] [bafcdge dgbace cgbad cdafe bedcfg be abge cebad dcfabg bed | dbe gabfced cgbedf cbadg] [becagf fdec debafc afedb adbgc bgdfea dabcf cf cabegfd afc | bagdc decf fca dfbae] [dcagb gfcade cgdebf fdbeag gdfeabc efdcg ecfb deb egbcd eb | eb edagbf ebfc eagdcf] [ebcdaf fgdc gbeac dgfae efadbg cd gcefda dgace fbgedac cda | aegdc dfabge gcade daceg] [fgdcb adceb fcgeabd acedbg af fba aebgdf efac dcabfe adbcf | cdbaf cgeadb bdcae bfgaed] [fcb fc fcdgb dabfg eabcfdg cbged cefg begdca gcdbfe efdacb | ecfg fabgcde gdecbaf bacged] [gfdabc ad bdfgea fegbdac gbaecf bfega adg adbe afged egdcf | dcfgab bgcefa gad gafcbd] [bgdcfea afb gabfcd adbfeg efdba bgdfe dfgbce eafdc bage ab | ab dgefb baf bgaedcf] [geabd adecfgb cg ebcdfa agfbdc fdcg dabcf dcbag faebcg cbg | dagbe fgdbeca cbagdfe fcbeda] [bdfa dafbge fgedb bfceg bdg afdebgc bd bdaecg defcga gfdea | bagfdce dcgafe fegbc dbegca] [aedcgb fb gdbaf dgabe acdfg fabgde fadecgb gbf edfb facegb | agdcf badeg fb fabcge] [dfbce gafed ba eagb gfdbca aefdb fecdag fagbedc abf egadfb | eafdb edfcbag dcfbe ba] [afdec fcegda edgabc bgdfc faebdc ba bac dcfebag fadbc fbae | deafc acb fbgaecd cfdea] [gecd dgf eabdf gd gfdeb fgcadb gcbfae cefbg cedfbg cfeabdg | gd edfba fgbce fbgec] [adfge bcgfde baecg dcfgaeb bafdge gdeac dagcef dc cdg acdf | cgd dgcae gcead cd] [efgac agbfedc aecbfd agbfde dcbg fdbag gacdfb bc fgbac fbc | bc afdegb bgdc edbafg] [be cbfgad acegdb agefd dabgc cebfgad gbce bdega dfbace bed | bagde eb egcb edfbac] [gf fag afgbe ecbaf geadb eabgdf egdf dagbfc ecagdb cbgdeaf | cbefa fg bdega gfacbed] [bag defba gcfdae cgbd gb eabgfc gcfabd dfagb gcdfa ecbgfda | begacf agb cgfade fcdga] [adgfcbe egd fgadeb cgbdae acdgb cgedb deca de efcbg acbdgf | cfbdag dcgba geabdf eadc] [cagdebf dgebcf edc abecfd egfadb fabed ec gadbc efca dabce | dec fbadec debac edc] [fcedg dfgbae eg deg egcb fgcebd efacd gfdcb gbfecda gdafbc | efacd ge cfgabde fagecdb] [dbag aefcbd gbc gcdbf bdcfa bg dfabcg ebadgcf cfgeba dgecf | bfaced gedcf dbag cgbdaf] [cdgfbea gd bdag gebca bdcgfe dgc fcagbe gabedc afcde cdaeg | abgcde ebcga dagb bgcefa] [cedgbfa ecabgd cdafeb bafcg cegdbf cae gdae gabce ae edcgb | aec cageb ecdgfb egda] [eacgbf afbdg gdecaf gafbcde gfc baefc bcge fcabg fdcbea cg | agfdb cgfba bgafc eacgdf] [fgebd fed bfea cbdeg decfga fe cfdgba defbgac dfgba afdbeg | fgdba abegdfc bcadgf fbegd] [adbfcg fagdbe bagec dc fbaedcg bdfag gbdca fcgedb dcfa cgd | fcad bfdgae dgc eagbc] [fgbaecd fgecd cafeg feacbg fdgcb fgaecd acdbge ed adfe dge | cfgdb gcedf deaf cfdbg] [gedab afdcbeg decabg bfedcg dgefab ef aedf cfgab gbaef efb | abcgf cabgf feagdcb cdbaefg] [fdb ebdgfc bd adefgcb efgad gbcd dfbge afcgeb fecgb dbeacf | bfd cgfdeba cafdeb gedfa] [abgde bdefa fagdbe fbadceg dgecab dfe ef edfgca bfdac fbge | fegb cagdeb ecdgab bdagefc] [febad bacged fge cdbeg cfebdag fgdc gf debcgf bdefg cfebga | fg egf beafd efg] [agdcbf bdefcga cbgefd dcagb gbedac faedc gfc bfag gfcad gf | bgfa dbagc bfgdca bcgad] [bdce gafbed gaecf bcefdag gbc dacbeg fcbgad egdab cb cegba | eadbgc cb ebadgf debc] [ac afgceb eagbf befcagd abcg degcf aefbdg ceagf edbacf acf | abecgf bgac gacb ceadbf] [abcg fcaeb gfdcabe ab befdc cfage gdbfea gecdaf efcgba bfa | bgac bcga cagb efgbda] [fbdeg gb fcdeb dfecbg eafgdbc edgfa eagbdc baedfc cbfg beg | adbgce dfcaeb bgfc abcged] [afg afdbec cbdgaf afcgedb bedgf cdagef ga afcdb gbca gfbda | cfagdb edcafg cbfgda bgfed] [edgafcb fdeab dgabcf cbgf gdfeac dgfab gdeacb acgbd gfa gf | gaf bcgf ecbagd agf] [dcbfa gfbace ebfca efcg bgfeadc abgce gbafde ef beadcg fbe | egcf fabdc adebgf bdcage] [gc cfdbe fgcebd bcgef ceg fdagceb ecadbg fgdc fageb bedcfa | adgcbe aefgdcb gabfe gc] [fgead bcdafg ba bcae edafb bcefad dbcfe cafbgde gbcdef adb | dcfeb gecdfb caeb bacdfe] [gfeab abc bc ecbf gdebaf gebac gdcea gecdfba acdfbg fbgcae | cbdagf gbcae bc edgbaf] [aecgf acbf cgadef fecbg bc ebc dcegba befdg aebgcf afdebgc | ecb bcgfe bgedf abcf] [fg facg efcagd eadfg cebfda feg daegb bdfcge afced cfeadgb | acdfe fgeda fg cdbegf] [gefda fed edfbgc fgeab cfad cdeag fd cebgad dcefabg fagdce | faegdc eafdg fd cgbfdea] [ebfad cf befca gabedc fac cabeg dcaefg abfecg fbacged gcbf | bfade fcbg fc cgbf] [aegbf cbdfega adbfg ef cebdgf dfcbga gebca fadgbe afde gfe | fdae afcbgd bgcedaf gef] [cdgab cg edgbac gbedfa gebcdaf dcebfg gcd degba aceg dacfb | gdc cgdba cdg gbadc] [daebfg fcebgad db gacbf feacdg gafdb eafdbc dgaef dfb bedg | cefdbag gedfca gafdeb befcda] [ecfd fcdgba cebgf fge bgafed febdcg cbfegad cabeg fe gfdbc | ecgdfb edfc gebdaf fecd] [fac gbeaf bcdga adgbcef febcda cfgba gefbda bagcfe cfge fc | gcfe gbcaf acfbeg acdgb] [afegdcb fdgba bfgacd fdcg fd cbfga adf ebcagf dcfabe gbdae | df bcaefd cfagb df] [cdbgef bgef ge ged badec agfdcb adgecf cgdeb cbgdf fdbceag | dcfgb gcebd egbf dcegb] [dfbea gb cfgea bag fgbc debcga acdbgef afcgbe gfeba cfdaeg | beafd bag cbgf gba] [fdgcab cd ebdaf baecdgf cda bcgaf cfebga acebgd cbdaf cfgd | aegcfb cdgf cdgf afegbdc] [fcbga cbeagf dcabg da dfabcg bdaf begcd dca fdagce bcgfdae | acgbd dbceg acd cfbga] [degacbf cf dcgfba adegbf efgab gfce acfeb dbeca caf gcebaf | bacfe abfecg ebafc debac] [bcaefd gbce dcegfb gcbadf dgfaecb fbdce dgcfe cg agfed fcg | dbgfec gc acdgfb efbcd] [cdfag dgebacf bdfagc fba acdgef fcdab bfdg baedc gbfaec fb | cedbafg fb dgfeac cadbf] [bcdgf eafcbgd bd adfb dcabeg gebfac gcfba gfdacb fdgce bgd | cfbga fgcab db fcegd] [cdgafe deg bedfc dfgb cgdbe dg dcefba efdgbc cagbefd cegab | bgdf abfdec egd gedbfc] [bg febdca edgcb cdeab gbc edgbca gdab beagcf cdegf debacfg | bcaedf dgcef badg fecadbg] [dbca cgaedb gcfbe cea fadbeg gabce ca edcafg degab abfedgc | fdebag beacg abcd adcegb] [gcdfe adbfgec cbafge dgbaf ebf gfbced eb adcgfe becd fgebd | ecgfba gcbfde dbec cdafge] [dbgeafc dacbg badfge abfce ed eda dcfe decba dcfeab gfbeca | febcda defc beacf fdgabe] [efcd bfcadge fcdba egabf bfdcag dcefba deagbc fabed ed edb | gbeacd fdeab ebcfad fageb] [dcgf fegdab bcaeg dcegaf dga gd dcfbea fcdea aedcg bdefgca | cbegdfa eabcfd adfce cbefda] [bf edfbgc cegbf bcadefg ebf acbfde gcedf feadgc gbcae gfbd | feb dfgb egbcdfa dfegc] [efgba eacd efadcg dcgefb gacdf dbcfgae efd bgcdaf edfga ed | cfbgda dgcfa gcfead eadfg] [afgdc fbg cdgaef fagbdc bgcefa cdbf bgdaf bdaeg fb dgabcfe | dagfc cefagb egcabf fcbd] [cadgfe acbed cfabgde fdbcge cfga fad fdeabg fa dcaef dcfge | fad bafgecd cfegad adbfcge] [agdefc cfad bdgecfa gadfe aefgc ad ceadgb gbafce bfedg agd | dag ad fcage cgbafe]"
data = [d.replace('[', "").replace(']', "") for d in data.split("] [")]
sum = 0
#--
for d in data:
    d = [d.strip() for d in d.split(" | ")]
    d = [d.split(" ") for d in d]
    print("-->"+str(d))
    e = [[], []]
    for i in range(0, len(d)):
        for s in d[i]:
            s = list(s)
            s.sort()
            e[i].append(''.join(s))
    d = dc(e)
    print("-->"+str(d))
    s = {1:'', 2:'', 3:'', 4:'', 5:'', 6:'', 7:'', 8:'', 9:'', 0:''}
    for i in d[0]:
        if len(i) == 2: s[1] = i
        if len(i) == 3: s[7] = i
        if len(i) == 4: s[4] = i
        if len(i) == 7: s[8] = i
    for i in d[0]:
        j = set(i)
        if len(i) == 5:
            # 2|3|5
            if set(s[1]).issubset(j):
                s[3] = i
            else:
                if len(set(i+s[4])) == 7:
                    s[2] = i
                else:
                    s[5] = i
        if len(i) == 6:
            # 9|6|0:
            if set(s[1]).issubset(j):
                if set(s[4]).issubset(j) and set(s[7]).issubset(j):
                    s[9] = i
                else:
                    s[0] = i
            else:
                s[6] = i
    print("-->"+str(s))
    for i in range(0, len(d[1])):
        for k,v in s.items():
            if d[1][i] == v:
                d[1][i] = k
    print("==>"+str(d))
    sum += int(''.join([str(n) for n in d[1]]))
print(sum)
#==
961735

###
# 9A
###
import sys, functools
data = "7678921234988678901238954323498765432125789999567898765454223789989865432124569899894325678989212965 6567890139876589992367896512987654321034569988979999879321012569876987573245979767799434599878909893 5456799298987699989456789401398765732125678967991098988632123458965987684347898955688976988768919789 4345898987698789878967894323499977543245789456789987999544345567894398789458997544567897976956898678 3212987656569898767998985435989899764766789366789875987656776678993239896569987632456789865432234567 4336796543456989658789976549978798765677890155898964298767897899789123987678998874567893984321045698 5445995432345678945669987698766689976798931234987654109988999935678939899789679965678912995452166789 6569876521236789123458998987654567899899545356998543212399990126989298759894579878789429876743278995 7689986432345691012567999098767678976989876877899984323456789237892129642923499989896545987895345954 8789976545856789134569892199898789895976989988999876567967898356799298731019989997998656798985457893 9895989686787899246698789989999898769894394399989987678988987577898987656198968956999897999876568954 4934399787899997657997679879987957656793239498765699789999599988967798868987657849899989879987679765 3210239898989298799876534568896543234899398997654249899923478999456679879876543434678976756798799876 4323359999879129987655423456789654455678966789743134998899567964345569998765432323459765433459893987 5535698998968934599543012348998766566789355678951034997678978954233498999988751012578978712778932398 6645987897659549698792133959429987679891234589432129865567899543102987899876542123457897653567890129 9759876789798998999983249898902398789932356796543298754346789643229876553987854348578998765778921234 9898765990987877698765398767893569898756789897954349853245678994346985432398765467689689978989434378 9949976891396662549876989756789698998767893959876498432134679989459876654459876567896567989997545456 9956987932985451234989977645656997649998932345987987543245789879569998786867997678987499797897697967 7899999549876310125698765432345896432109985456798998676346789567998759897878998789599986656789989898 6798897656995421234999876501456789543998976567899989785456894456789543998989559895498764345899878789 5676789799876532459899997632567897669887987678989976998767943345678932109995446996987653234998765678 4565692987987683769789876543478998798756799799878995439889321234589543319865325789876543129987644569 3234891996598954598698998674989439979545678998956989421995495345678954429876434567998652098999432878 4545689879459765986567899876896529865436567987545678939876989459789867834987545699899754987898541245 7666799767249899865456778987898698965323457976434567891989879567899989655698956989798999876987672396 8787898654123999794325767998999987979412399854323457892499968998998998776789769876587989765698983989 9898987653234598643214656899998876898924987643212356789598956989767899989899889976465678924589999878 8959199764545689954902345789987765786899876542101245678987547678958899898967999984324569012367899767 7543019878789899899895496899876643245689987653212357899498636569446798767856789999313458923457998758 9652123989896998789799989901985432136793298765323768912399923479234987654545998898926567894568989549 8783435699934987654678978919876543046789109895434879101989812568995698543239896787987678985879876435 9897545789219876543234567923987652167898912976545689239878601477889789632198785676798799976989989324 9998676792101997689345698934598743999987893987866789398765412345678998744987674345889899899992398435 8799787893912398795458789545689899887876689798978996989876323456889898759876543234578999788921987567 7678998959893459987567899766798998776564599649989565878989554567996789769985432123699998677892398878 6578999446789567899678998977897899656453878932199434567898765678945698978996543434589987545799469989 3467891235697679998799567898986798743212367943098923456989976789434987899987655546678998624678978998 2379910145789798969896466789875669853201458954987897599878999898559876789899897677889359534567899987 9498921234578967345912345698654356965342367899876798989767899987698865678789998788990297645678999896 8997945945689653239543456789743239877463478998985679975656789998987654235699869899459987657789998765 7686899899789764398654678999899345998569989767564578954545689989599875123987654912348999767899979654 2545798788999875498798789987988957987678997654353989543234569876421986013498763201567899878998765423 1236789657899989569899899986767998998989987543212895432123698765310197124569654323468998999769876534 0198996545678997689968909865456789989799898987323789543254789898725239295998767434569987987656998676 1246789324568998798754219874367899875698769996534679654345679997654356989899896545678976898543459987 2345994213579329999864346976788987654398657987785789876456789999765459878788987698789875795432346899 3456943103589439899976487987899398966497546798999897989597899899976598765697898789895934989521235678 6577893212347998799987898998989209897989434989321956899989999789987699654346889897954329878945656789 7898954523456895688999999879878998789879219876532348998978987678999987543234678976543219867896867897 8949765434577934567934698765467899654569998997543467987767896567899995432125698988655398988987898986 9939876657689810128955987656356789543498766789676579876456789459929876321014567899789997699898939345 9899989769798752379969876543245678932398754596987689996567992398910987432323458959899878598789320123 8789999878987643467893985432134699210987643135898792987678931987934598893434567945921965498678921939 4678999989598654688912396543245964329876532023789910199789549876899799764545678956899876324567939898 3456789895429765678901987656457895435995432134567891249897698965788989879659789968998765412679898797 4597998766219876789799999786578987559876543265678943459998987754557678988769899879879876543498776656 6789109854101989895698999898689499678987665345789759598789876543234567999899901999768987656989654235 7899298943212399923987997999995398989298887969899898999567987432123459877989219878957898769876543123 8987987654434459439876786789889987899199999878978997898689989731036769765678998767942109879988654234 9566798765645798998765345698778656798987878989769876998799876545645998954567896659956212989999986646 4345899876756987899873234569656546897976967897654645789893987676789987943456964348897323499854598758 3234998989967986789982126997435135456895456986543234678901998787899876542546893237789434999743219869 9099767898999865689321019876521012367892356798632126778919879898998997621238964345678956898654309878 8987652967989754578993998765432763778901256989321034567898765909987898730145695476789867959765412989 7896543459876543469789879876743454678994349876532123456789973219876799421234689587891979039876567899 6987699967985432379699867997854575789689467987944354569899894398765987632345898799910989123987679988 5498987899876541234578956798965676793578989099895465678976789987654598943656789899321995434598989767 6589876999997672345689545899877989892345893139799876889765698998873459658769898957949876565789397656 7678965698976543456789323459988999943456789298689989997654567999764569879878997745698989876899298743 9899894797897765689893312568999598764567899987578993298785979898975678989989986534987899987998999652 4987643656798976793932101478965329998789999876459999109999898767899789694499997929876799999897898921 3298432345789989892953212379654219899899876432367898919878798756998999532378999897655678998786987890 5099321234877895989894324569795499789999987321458987899957654346897898921569998789743235699674876791 6988430123456794578789456678989987678998765432567896999843210123456987892459976678954346986553285892 7976651237897943445678967889978976587899876543678965698754942434567935793598765569899457996442154589 8995432456789321234567978998767894356789997656789214569869893545678923989789874346778967984321023478 9987659567895432345689989999846789267899898767892103489998789678989019878999995234569979876465434567 2198968789976563456792199899656895458986789878943212567987659989392198965487893123479989987566545678 9099879999998654567989299798767976569875897989654343459876548990129987654356989235689495698998676799 8989999987769765679878987649878987679564456899868764567982137892498975431245678949794323499998787891 7668899876545989899768999534989998789432345689999879779873256899987653210134567898999467987899898990 5456789994323499998657898745699979895431956798989989898654568998798974321265678987998979886789979789 4245790295934589876546789976789865976599897997878998939765978989659765432347889986987898765699865678 2134891989895678996534578999898654987988789896767897659877899678942986543656798765976789654599654589 3256789978789989987321367899987843499875699765656998798998936567890197665689897674765678963688912345 9346789865678999865475456789996512569764598654546789987659123489921298778895999543124789754567901234 8957898654567921976986667896989423498843699543234678976543234595432569989954398751012678965679892945 7899987653459892988987778965978934987654985432124599897964545679843456798743297532154567896798789896 6899999542356789899299989754567899999769876563465789789875657789654577897659349854365789949897679789 5678987601298997789124596643454598789989997654567898679986768898765689999798998768456895435989567678 4567998732349765691015975432123987667895329765678976588987878999876998898987649879768929759878454569 3479876545458954589129896543239865456789439878899643456798989989989876787976534999878909998764343457 2567987657567895678998789654497654345678945989998532145799098767898765476899745699989698999873232565 3456798978678976889765678967986643234789656793987643234689198656987654365678956789995466987652101234 4568999989889987996554779879865432123898767892198754365699987545976543234579987899954345699843232345 5679987691998998965443456989976321034999878943598767896789876529865432123689298989875677899854345456 6789996532467899654321269890195432146890989659679889919899965419876543254590129678986789998767957687 7999986543456798767532345789987543256932399767899995323999876201998754365789234567897890129878968798".split(" ")
data = [list(r) for r in data]
rows = len(data)
cols = len(data[0])
data = [[int(data[r][c]) for c in range(cols)] for r in range(rows)]
mins = [[0 for c in range(cols)] for r in range(rows)]
def show(t, d): print("---"+t+"---"); print(str(d).replace('[[',"[").replace(']]', "]").replace(' ', "").replace('],[', "]\n["))
#--
class Point(object):
    def __init__(self, r, c):
        global data
        global rows
        global cols
        self.__tops = 0
        self.__rights = 0
        self.__downs = 0
        self.__lefts = 0
        self.__r = r
        self.__c = c
        
    def find(self):
        m = self.next(self.__r, self.__c)
        return m
        
    def next(self, r=0, c=0, f='trdl'):
        x = [sys.maxsize]
        if 't' in f:
            x.append(self.top(r, c))
        if 'r' in f:
            x.append(self.right(r, c))
        if 'd' in f:
            x.append(self.down(r, c))
        if 'l' in f:
            x.append(self.left(r, c))
        x.sort()
        return x[0]
    
    def top(self, r, c):
        if self.__tops < rows:
            if (r-1) >= 0:
                if data[r-1][c] <= data[r][c]:
                    self.__tops += 1
                    return self.next(r-1, c, 'trl')
        return data[r][c]
    
    def right(self, r, c):
        if self.__rights < cols:
            if (c+1) < cols:
                if data[r][c+1] <= data[r][c]:
                    self.__rights += 1
                    return self.next(r, c+1, 'trd')
        return data[r][c]
    
    def down(self, r, c):
        if self.__downs < rows:
            if (r+1) < rows:
                if data[r+1][c] <= data[r][c]:
                    self.__downs += 1
                    return self.next(r+1, c, 'rdl')
        return data[r][c]
    
    def left(self, r, c):
        if self.__lefts < cols:
            if (c-1) >= 0:
                if data[r][c-1] <= data[r][c]:
                    self.__lefts += 1
                    return self.next(r, c-1, 'tdl')
        return data[r][c]
#--
outs = []
mins = [[0 for c in range(cols)] for r in range(rows)]
#--
show("DATA", data)
show("MINS", mins)
for r in range(0, rows):
    for c in range(0, cols):
        mins[r][c] = Point(r, c).find()
        show("MINS", mins)
#--
for r in range(0, rows):
    for c in range(0, cols):
        if data[r][c] == mins[r][c]:
            outs.append(data[r][c])
#---
print("---OUTS---")
print(outs)
print(functools.reduce(lambda a, b: a + b, [o+1 for o in outs]))
#==
480

###
# 9B, data and smoke basin center positions are from previous 9A task.
###
